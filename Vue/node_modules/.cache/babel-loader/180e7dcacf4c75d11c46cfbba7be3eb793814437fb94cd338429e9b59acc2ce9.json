{"ast":null,"code":"export default {\n  props: ['results'],\n  data() {\n    return {\n      ratio: 1,\n      dx: 0,\n      dy: 0,\n      isMove: false,\n      beforeMouseX: null,\n      beforeMouseY: null,\n      coords: [],\n      selectIdx: 0,\n      radius: window.innerWidth / 150,\n      field_w: window.innerWidth * 0.6,\n      field_h: window.innerWidth * 0.39,\n      weightNum: 5,\n      stroke: 'black',\n      canvas: null,\n      context: null,\n      canvasMode: 'penBlack'\n    };\n  },\n  watch: {\n    results: function () {\n      this.coords = this.results;\n      this.canvasMode = \"drag\";\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    },\n    coords: function () {\n      // 円の描画\n      for (let i = 0; i < this.coords.length; i++) {\n        this.context.beginPath();\n        this.context.arc(parseInt(this.coords[i].x * this.field_w / 115), parseInt(this.coords[i].y * this.field_h / 75), this.radius, 0, 2 * Math.PI);\n        this.context.fillStyle = this.coords[i].color;\n        this.context.fill();\n        this.context.lineWidth = 2;\n        this.context.strokeStyle = this.stroke;\n        this.context.stroke();\n      }\n    }\n  },\n  mounted() {\n    this.canvas = document.querySelector('#myCanvas');\n    this.context = this.canvas.getContext('2d');\n    this.context.lineCap = 'round';\n    this.context.lineCap = 'round';\n    this.canvas.width = this.field_w;\n    this.canvas.height = this.field_h;\n    this.context.lineWidth = this.weightNum;\n    this.context.strokeStyle = this.stroke;\n    console.log(\"field-width : \", this.field_w);\n    console.log(\"field-height : \", this.field_h);\n  },\n  methods: {\n    // 描画\n    draw: function (e) {\n      let x = e.offsetX;\n      let y = e.offsetY;\n      if (!this.isDrag) return;\n\n      // dragモード\n      if (this.canvasMode == \"drag\") {\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        // this.context.clearRect(parseInt(this.coords[this.selectIdx].x * this.field_w / 115) - this.radius, parseInt(this.coords[this.selectIdx].y * this.field_h / 75) - this.radius, this.radius * 3, this.radius * 3);\n        // this.context.clearRect(this.beforeMouseX - this.radius, this.beforeMouseY - this.radius, this.radius * 5, this.radius * 5);        \n\n        if (!this.isMove) return;\n        var mouseX = x * this.ratio + this.dx;\n        var mouseY = y * this.ratio + this.dy;\n        var dx = 0;\n        var dy = 0;\n        if (this.beforeMouseX && this.beforeMouseY) {\n          dx = mouseX - this.beforeMouseX;\n          dy = mouseY - this.beforeMouseY;\n        }\n        this.beforeMouseX = mouseX;\n        this.beforeMouseY = mouseY;\n        var tempX = dx / this.field_w * 115 + Number(this.coords[this.selectIdx].x);\n        var tempY = dy / this.field_h * 75 + Number(this.coords[this.selectIdx].y);\n        if (tempX > 0) this.coords[this.selectIdx].x = tempX;\n        if (tempY > 0) this.coords[this.selectIdx].y = tempY;\n        for (let i = 0; i < this.coords.length; i++) {\n          this.context.beginPath();\n          this.context.arc(parseInt(this.coords[i].x * this.field_w / 115), parseInt(this.coords[i].y * this.field_h / 75), this.radius, 0, 2 * Math.PI);\n          this.context.fillStyle = this.coords[i].color;\n          this.context.fill();\n          this.context.lineWidth = 2;\n          this.context.strokeStyle = this.stroke;\n          this.context.stroke();\n        }\n      } else {\n        // dragモード以外\n        this.context.lineTo(x, y);\n        this.context.stroke();\n      }\n    },\n    // 描画開始（mousedown）\n    dragStart: function (e) {\n      if (this.canvasMode == \"drag\") {\n        this.isMove = true;\n        var minDistance = 1000;\n        var minIdx;\n\n        // クリックした位置に最も近い円のインデックスを取得\n        for (var i = 0; i < this.coords.length; i++) {\n          var dataX = parseInt(this.coords[i].x * this.field_w / 115);\n          var dataY = parseInt(this.coords[i].y * this.field_h / 75);\n          var mouseX = e.offsetX;\n          var mouseY = e.offsetY;\n          var distance = Math.sqrt(Math.pow(mouseX - dataX, 2) + Math.pow(mouseY - dataY, 2));\n          if (distance < minDistance) {\n            minDistance = distance;\n            minIdx = i;\n          }\n        }\n        console.log(\"Selected index : \", minIdx);\n        this.selectIdx = minIdx;\n      } else {\n        let x = e.offsetX;\n        let y = e.offsetY;\n        this.context.beginPath();\n        this.context.lineTo(x, y);\n        this.context.stroke();\n      }\n      this.isDrag = true;\n    },\n    // 描画終了（mouseup, mouseout）\n    dragEnd: function () {\n      if (this.canvasMode == \"drag\") {\n        this.isMove = false;\n        this.beforeMouseX = null;\n        this.beforeMouseY = null;\n      }\n      this.isDrag = false;\n    },\n    clear: function () {\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    },\n    // ドラッグモード\n    moveArc: function () {\n      this.canvasMode = 'drag';\n      this.context.strokeStyle = '#00000000';\n      // this.context.strokeStyle = '#000';\n    },\n\n    // ペンモード（黒）\n    penBlack: function () {\n      // カーソル変更\n      this.canvasMode = 'penBlack';\n\n      // 描画設定\n      this.context.lineCap = 'round';\n      this.context.lineJoin = 'round';\n      this.context.lineWidth = 5;\n      this.context.strokeStyle = '#000000';\n    },\n    // ペンモード（赤）\n    penRed: function () {\n      // カーソル変更\n      this.canvasMode = 'penRed';\n\n      // 描画設定\n      this.context.lineCap = 'round';\n      this.context.lineJoin = 'round';\n      this.context.lineWidth = 5;\n      this.context.strokeStyle = '#FF0000';\n    },\n    // ペンモード（青）\n    penBlue: function () {\n      // カーソル変更\n      this.canvasMode = 'penBlue';\n\n      // 描画設定\n      this.context.lineCap = 'round';\n      this.context.lineJoin = 'round';\n      this.context.lineWidth = 5;\n      this.context.strokeStyle = '#0000FF';\n    },\n    // 消しゴムモード\n    eraser: function () {\n      // カーソル変更\n      this.canvasMode = 'eraser';\n\n      // 描画設定\n      this.context.lineCap = 'square';\n      this.context.lineJoin = 'square';\n      this.context.lineWidth = 30;\n      this.context.strokeStyle = '#FFFFFF';\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["props","data","ratio","dx","dy","isMove","beforeMouseX","beforeMouseY","coords","selectIdx","radius","window","innerWidth","field_w","field_h","weightNum","stroke","canvas","context","canvasMode","watch","results","clearRect","width","height","i","length","beginPath","arc","parseInt","x","y","Math","PI","fillStyle","color","fill","lineWidth","strokeStyle","mounted","document","querySelector","getContext","lineCap","console","log","methods","draw","e","offsetX","offsetY","isDrag","mouseX","mouseY","tempX","Number","tempY","lineTo","dragStart","minDistance","minIdx","dataX","dataY","distance","sqrt","pow","dragEnd","clear","moveArc","penBlack","lineJoin","penRed","penBlue","eraser"],"sourceRoot":"","sources":["C:\\Users\\20t333\\Documents\\実験2\\Football-Tactical-Board\\Vue\\src\\components\\CanvasField.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <canvas id=\"myCanvas\" :class=\"{eraser: canvasMode === 'eraser'}\" ref=\"myCanvas\" @mousedown=\"dragStart\" @mouseup=\"dragEnd\" @mouseout=\"dragEnd\" @mousemove=\"draw\"></canvas>\r\n    <div id=\"tool-area\">\r\n      <fieldset>\r\n        <input id=\"move-arc-button\" @click=\"moveArc\" class=\"radio-inline__input\" type=\"radio\" checked=\"checked\"/>\r\n        <label class=\"radio-inline__label\" for=\"move-arc-button\">\r\n            DRAG\r\n        </label>\r\n        <input id=\"pen-black-button\" @click=\"penBlack\" class=\"radio-inline__input\" type=\"radio\"/>\r\n        <label class=\"radio-inline__label\" for=\"pen-black-button\">\r\n            BLACK\r\n        </label>\r\n        <input id=\"pen-red-button\" @click=\"penRed\" class=\"radio-inline__input\" type=\"radio\"/>\r\n        <label class=\"radio-inline__label\" for=\"pen-red-button\">\r\n            RED\r\n        </label>\r\n        <input id=\"pen-blue-button\" @click=\"penBlue\" class=\"radio-inline__input\" type=\"radio\"/>\r\n        <label class=\"radio-inline__label\" for=\"pen-blue-button\">\r\n            BLUE\r\n        </label>\r\n        <input id=\"eraser-button\" @click=\"eraser\" class=\"radio-inline__input\" type=\"radio\"/>\r\n        <label class=\"radio-inline__label\" for=\"eraser-button\">\r\n            ERASE\r\n        </label>\r\n        <input id=\"clear-button\" @click=\"clear\" class=\"radio-inline__input\" type=\"radio\">\r\n        <label class=\"radio-inline__label\" for=\"clear-button\">\r\n            CLEAR\r\n        </label>\r\n      </fieldset>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n  props: ['results'],\r\n  data () {\r\n    return {\r\n      ratio: 1,\r\n      dx: 0,\r\n      dy: 0,\r\n      isMove: false,\r\n      beforeMouseX: null,\r\n      beforeMouseY: null,\r\n      coords: [],\r\n      selectIdx: 0,\r\n      radius: window.innerWidth / 150,\r\n      field_w: window.innerWidth * 0.6,\r\n      field_h: window.innerWidth * 0.39,\r\n      weightNum: 5,\r\n      stroke: 'black',\r\n      canvas: null,\r\n      context: null,\r\n      canvasMode: 'penBlack',\r\n    } \r\n  },\r\n  watch: {\r\n    results: function() {\r\n      this.coords = this.results      \r\n      this.canvasMode = \"drag\"\r\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    },\r\n    coords: function() {\r\n      // 円の描画\r\n      for (let i = 0; i < this.coords.length; i++) {\r\n        this.context.beginPath()\r\n        this.context.arc(parseInt(this.coords[i].x * this.field_w / 115), parseInt(this.coords[i].y * this.field_h / 75), this.radius, 0, 2 * Math.PI)\r\n        this.context.fillStyle = this.coords[i].color\r\n        this.context.fill()\r\n        this.context.lineWidth = 2\r\n        this.context.strokeStyle = this.stroke\r\n        this.context.stroke()\r\n      }\r\n    }\r\n\r\n  },  \r\n  mounted () {\r\n    this.canvas = document.querySelector('#myCanvas')\r\n    this.context = this.canvas.getContext('2d')\r\n    this.context.lineCap = 'round'\r\n    this.context.lineCap = 'round'\r\n    this.canvas.width = this.field_w\r\n    this.canvas.height = this.field_h\r\n    this.context.lineWidth = this.weightNum\r\n    this.context.strokeStyle = this.stroke\r\n    \r\n    console.log(\"field-width : \", this.field_w)\r\n    console.log(\"field-height : \", this.field_h)\r\n  },\r\n  methods: {\r\n    // 描画\r\n    draw :function(e) {\r\n      let x = e.offsetX\r\n      let y = e.offsetY\r\n      if(!this.isDrag) return;\r\n\r\n      // dragモード\r\n      if (this.canvasMode == \"drag\") {\r\n        \r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        // this.context.clearRect(parseInt(this.coords[this.selectIdx].x * this.field_w / 115) - this.radius, parseInt(this.coords[this.selectIdx].y * this.field_h / 75) - this.radius, this.radius * 3, this.radius * 3);\r\n        // this.context.clearRect(this.beforeMouseX - this.radius, this.beforeMouseY - this.radius, this.radius * 5, this.radius * 5);        \r\n\r\n        if (!this.isMove) return\r\n        var mouseX = x * this.ratio + this.dx\r\n        var mouseY = y * this.ratio + this.dy\r\n        var dx = 0\r\n        var dy = 0\r\n        if (this.beforeMouseX && this.beforeMouseY) {\r\n            dx = mouseX - this.beforeMouseX\r\n            dy = mouseY - this.beforeMouseY\r\n        }\r\n        this.beforeMouseX = mouseX\r\n        this.beforeMouseY = mouseY\r\n        var tempX = (dx  / this.field_w * 115) + Number(this.coords[this.selectIdx].x)\r\n        var tempY = (dy / this.field_h * 75) + Number(this.coords[this.selectIdx].y)\r\n        if (tempX > 0) this.coords[this.selectIdx].x = tempX\r\n        if (tempY > 0) this.coords[this.selectIdx].y = tempY\r\n\r\n        for (let i = 0; i < this.coords.length; i++) {\r\n          \r\n          this.context.beginPath()\r\n          this.context.arc(parseInt(this.coords[i].x * this.field_w / 115), parseInt(this.coords[i].y * this.field_h / 75), this.radius, 0, 2 * Math.PI)\r\n          this.context.fillStyle = this.coords[i].color\r\n          this.context.fill()\r\n          this.context.lineWidth = 2\r\n          this.context.strokeStyle = this.stroke\r\n          this.context.stroke()\r\n        }\r\n      } else { // dragモード以外\r\n        this.context.lineTo(x, y);\r\n        this.context.stroke();\r\n      }\r\n    },\r\n    // 描画開始（mousedown）\r\n    dragStart:function(e) {\r\n      if (this.canvasMode == \"drag\") {\r\n        this.isMove = true\r\n        var minDistance = 1000\r\n        var minIdx\r\n\r\n        // クリックした位置に最も近い円のインデックスを取得\r\n        for (var i = 0; i < this.coords.length; i++) {\r\n          var dataX = parseInt(this.coords[i].x * this.field_w / 115)\r\n          var dataY = parseInt(this.coords[i].y * this.field_h / 75)\r\n          var mouseX = e.offsetX\r\n          var mouseY = e.offsetY\r\n          var distance = Math.sqrt( Math.pow( mouseX-dataX, 2 ) + Math.pow( mouseY-dataY, 2 ) )\r\n          if (distance < minDistance) {\r\n            minDistance = distance\r\n            minIdx = i\r\n          }\r\n        }\r\n        console.log(\"Selected index : \", minIdx)\r\n        this.selectIdx = minIdx\r\n      } else {\r\n        let x = e.offsetX\r\n        let y = e.offsetY\r\n        this.context.beginPath();\r\n        this.context.lineTo(x, y);\r\n        this.context.stroke();\r\n      }\r\n      this.isDrag = true;\r\n    },\r\n    // 描画終了（mouseup, mouseout）\r\n    dragEnd: function() {\r\n      if (this.canvasMode == \"drag\") {\r\n        this.isMove = false\r\n        this.beforeMouseX = null\r\n        this.beforeMouseY = null\r\n      }\r\n\r\n      this.isDrag = false;\r\n    },\r\n    clear: function() {\r\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    },\r\n    // ドラッグモード\r\n    moveArc: function() {\r\n      this.canvasMode = 'drag'\r\n      this.context.strokeStyle = '#00000000';\r\n      // this.context.strokeStyle = '#000';\r\n    },\r\n    // ペンモード（黒）\r\n    penBlack: function(){\r\n      // カーソル変更\r\n      this.canvasMode = 'penBlack'\r\n  \r\n      // 描画設定\r\n      this.context.lineCap = 'round';\r\n      this.context.lineJoin = 'round';\r\n      this.context.lineWidth = 5;\r\n      this.context.strokeStyle = '#000000';\r\n    },\r\n    // ペンモード（赤）\r\n    penRed: function(){\r\n      // カーソル変更\r\n      this.canvasMode = 'penRed'\r\n  \r\n      // 描画設定\r\n      this.context.lineCap = 'round';\r\n      this.context.lineJoin = 'round';\r\n      this.context.lineWidth = 5;\r\n      this.context.strokeStyle = '#FF0000';\r\n    },\r\n    // ペンモード（青）\r\n    penBlue: function(){\r\n      // カーソル変更\r\n      this.canvasMode = 'penBlue'\r\n  \r\n      // 描画設定\r\n      this.context.lineCap = 'round';\r\n      this.context.lineJoin = 'round';\r\n      this.context.lineWidth = 5;\r\n      this.context.strokeStyle = '#0000FF';\r\n    },\r\n    // 消しゴムモード\r\n    eraser: function() {\r\n      // カーソル変更\r\n      this.canvasMode = 'eraser'\r\n \r\n      // 描画設定\r\n      this.context.lineCap = 'square';\r\n      this.context.lineJoin = 'square';\r\n      this.context.lineWidth = 30;\r\n      this.context.strokeStyle = '#FFFFFF';\r\n    }\r\n  },\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n* {\r\n  text-align: center;\r\n}\r\n\r\n#myCanvas {\r\n background-size: contain;\r\n background-image: url('~@/assets/field.jpg');\r\n background-repeat:no-repeat;\r\n}\r\n\r\n.eraser {\r\n  cursor: url(../assets/eraser.png) 15 15,auto;\r\n}\r\n\r\nfieldset {\r\n  border: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  text-align: center;\r\n}\r\n\r\nh1 {\r\n  margin: 0;\r\n  line-height: 1.2;\r\n}\r\n\r\np {\r\n  margin: 0 0 1.6rem;\r\n  padding-bottom: 0.2rem;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.radio-inline__input {\r\n    clip: rect(1px, 1px, 1px, 1px);\r\n    position: absolute !important;\r\n}\r\n\r\n.radio-inline__label {\r\n    display: inline-block;\r\n    padding: 0.5rem 1rem;\r\n    border: 1px solid #fff;\r\n    color: #fff;\r\n\r\n    margin-right: 18px;\r\n    border-radius: 3px;\r\n    transition: all .2s;\r\n}\r\n\r\n.radio-inline__input:checked + .radio-inline__label {\r\n    /* background: #B54A4A; */\r\n    /* border: 1px solid #fff; */\r\n\r\n    color: #fff;\r\n    text-shadow: 0 0 1px rgba(0,0,0,.7);\r\n}\r\n\r\n.radio-inline__input:focus + .radio-inline__label {\r\n    outline-color: #4D90FE;\r\n    /* background: #B54A4A; */\r\n    background: #B54A4A;\r\n\r\n    outline-offset: -2px;\r\n    outline-style: auto;\r\n    outline-width: 5px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}