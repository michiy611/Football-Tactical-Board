{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-39d2ff82\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  id: \"tool-area\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_arc = _resolveComponent(\"arc\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" SVG定義 \"), _createCommentVNode(\" <div class=\\\"board\\\"> \"), _createCommentVNode(\" <div class=\\\"board-area\\\"> \"), _createElementVNode(\"canvas\", {\n    id: \"myCanvas\",\n    class: _normalizeClass({\n      eraser: $data.canvasMode === 'eraser'\n    }),\n    ref: \"myCanvas\",\n    onMousedown: _cache[0] || (_cache[0] = (...args) => $options.dragStart && $options.dragStart(...args)),\n    onMouseup: _cache[1] || (_cache[1] = (...args) => $options.dragEnd && $options.dragEnd(...args)),\n    onMouseout: _cache[2] || (_cache[2] = (...args) => $options.dragEnd && $options.dragEnd(...args)),\n    onMousemove: _cache[3] || (_cache[3] = (...args) => $options.draw && $options.draw(...args))\n  }, [_createCommentVNode(\" <svg class=\\\"circle\\\"> \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.coords, (r, idx) => {\n    return _openBlock(), _createBlock(_component_arc, {\n      key: idx,\n      onMousedown: $event => $options.move($event, idx),\n      fill: r.color,\n      stroke: $data.stroke,\n      x: parseInt(r.x * $data.field_w / 115),\n      y: parseInt(r.y * $data.field_h / 75),\n      r: $data.radius\n    }, null, 8 /* PROPS */, [\"onMousedown\", \"fill\", \"stroke\", \"x\", \"y\", \"r\"]);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" </svg> \")], 34 /* CLASS, HYDRATE_EVENTS */), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"button\", {\n    id: \"pen-black-button\",\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.penBlack && $options.penBlack(...args))\n  }, \"ペン（黒）\"), _createElementVNode(\"button\", {\n    id: \"pen-red-button\",\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.penRed && $options.penRed(...args))\n  }, \"ペン（赤）\"), _createElementVNode(\"button\", {\n    id: \"pen-blue-button\",\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.penBlue && $options.penBlue(...args))\n  }, \"ペン（青）\"), _createElementVNode(\"button\", {\n    id: \"eraser-button\",\n    onClick: _cache[7] || (_cache[7] = (...args) => $options.eraser && $options.eraser(...args))\n  }, \"消しゴム\"), _createElementVNode(\"button\", {\n    id: \"clear-button\",\n    onClick: _cache[8] || (_cache[8] = (...args) => $options.clear && $options.clear(...args))\n  }, \"クリア\")]), _createCommentVNode(\" </div> \"), _createCommentVNode(\" </div> \")]);\n}","map":{"version":3,"mappings":";;;EACOA,KAAK,EAAC;AAAW;;EAcXC,EAAE,EAAC;AAAW;;;uBAdzBC,oBAuBM,OAvBNC,UAuBM,GAtBJC,8BAAc,EAEdA,8CAA4B,EAC1BA,mDAAiC,EAC/BC,oBAQS;IARDJ,EAAE,EAAC,UAAU;IAAED,KAAK;MAAAM,QAAWC,gBAAU;IAAA;IAAgBC,GAAG,EAAC,UAAU;IAAEC,WAAS,yCAAEC,iDAAS;IAAGC,SAAO,yCAAED,6CAAO;IAAGE,UAAQ,yCAAEF,6CAAO;IAAGG,WAAS,yCAAEH,uCAAI;MAChKN,+CAA6B,qBACzBF,oBAIMY,6BAJkBP,YAAM,GAAjBQ,CAAC,EAAEC,GAAG;yBAAnBC,aAIMC;MAJ2BC,GAAG,EAAEH,GAAG;MACtCP,WAAS,YAAEC,aAAI,CAACU,MAAM,EAAEJ,GAAG;MAC3BK,IAAI,EAAEN,CAAC,CAACO,KAAK;MAAGC,MAAM,EAAEhB,YAAM;MAC9BiB,CAAC,EAAEC,QAAQ,CAACV,CAAC,CAACS,CAAC,GAAGjB,aAAO;MAAUmB,CAAC,EAAED,QAAQ,CAACV,CAAC,CAACW,CAAC,GAAGnB,aAAO;MAASQ,CAAC,EAAER;;kCAE/EH,+BAAe,oCAEbC,oBAMM,OANNsB,UAMM,GALJtB,oBAA8D;IAAtDJ,EAAE,EAAC,kBAAkB;IAAE2B,OAAK,yCAAElB,+CAAQ;KAAE,OAAK,GACrDL,oBAA0D;IAAlDJ,EAAE,EAAC,gBAAgB;IAAE2B,OAAK,yCAAElB,2CAAM;KAAE,OAAK,GACjDL,oBAA4D;IAApDJ,EAAE,EAAC,iBAAiB;IAAE2B,OAAK,yCAAElB,6CAAO;KAAE,OAAK,GACnDL,oBAAyD;IAAjDJ,EAAE,EAAC,eAAe;IAAE2B,OAAK,yCAAElB,2CAAM;KAAG,MAAI,GAChDL,oBAAqD;IAA7CJ,EAAE,EAAC,cAAc;IAAE2B,OAAK,yCAAElB,yCAAK;KAAE,KAAG,KAEhDN,+BAAe,EACjBA,+BAAe","names":["class","id","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","eraser","$data","ref","onMousedown","$options","onMouseup","onMouseout","onMousemove","_Fragment","r","idx","_createBlock","_component_arc","key","$event","fill","color","stroke","x","parseInt","y","_hoisted_2","onClick"],"sourceRoot":"","sources":["C:\\Users\\20t333\\Documents\\実験2\\Football-Tactical-Board\\frontend\\src\\components\\CanvasField.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- SVG定義 -->\r\n\r\n    <!-- <div class=\"board\"> -->\r\n      <!-- <div class=\"board-area\"> -->\r\n        <canvas id=\"myCanvas\" :class=\"{eraser: canvasMode === 'eraser'}\" ref=\"myCanvas\" @mousedown=\"dragStart\" @mouseup=\"dragEnd\" @mouseout=\"dragEnd\" @mousemove=\"draw\">\r\n      <!-- <svg class=\"circle\"> -->\r\n          <arc v-for=\"(r, idx) in coords\" :key=\"idx\"\r\n            @mousedown=\"move($event, idx)\"\r\n            :fill=\"r.color\" :stroke=\"stroke\"\r\n            :x=\"parseInt(r.x * field_w / 115)\" :y=\"parseInt(r.y * field_h / 75)\" :r=\"radius\">\r\n          </arc>\r\n      <!-- </svg> -->\r\n        </canvas>\r\n        <div id=\"tool-area\">\r\n          <button id=\"pen-black-button\" @click=\"penBlack\">ペン（黒）</button>\r\n          <button id=\"pen-red-button\" @click=\"penRed\">ペン（赤）</button>\r\n          <button id=\"pen-blue-button\" @click=\"penBlue\">ペン（青）</button>\r\n          <button id=\"eraser-button\" @click=\"eraser\" >消しゴム</button>\r\n          <button id=\"clear-button\" @click=\"clear\">クリア</button>\r\n        </div>\r\n      <!-- </div> -->\r\n    <!-- </div> -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n  props: ['results'],\r\n  data () {\r\n    return {\r\n      ratio: 1,\r\n      dx: 0,\r\n      dy: 0,\r\n      viewport: '0 0 500 500',\r\n      isMove: false,\r\n      beforeMouseX: null,\r\n      beforeMouseY: null,\r\n      selectIdx: 0,\r\n      radius: window.innerWidth / 150,\r\n      coords: [],\r\n      stroke: 'black',\r\n      field_w: window.innerWidth * 0.6,\r\n      field_h: window.innerWidth * 0.39,\r\n\r\n      weightNum: 5,\r\n      canvas: null,\r\n      pen_color: \"black\",\r\n      context: null,\r\n      canvasMode: 'penBlack',\r\n    } \r\n  },\r\n  watch: {\r\n    results: function() {\r\n      this.coords = this.results\r\n\r\n      for (r in this.coords) {\r\n        this.context.beginPath()\r\n        context.arc(r.x, r.y, this.radius, 0, 2 * Math.PI);\r\n        context.fillStyle = r.color;\r\n        context.fill();\r\n      }\r\n    }\r\n\r\n  },  \r\n  // マウス操作関連\r\n  mounted () {\r\n    console.log('MOUNT LISTENER ON')\r\n    console.log(this.field_w)\r\n    console.log(this.field_h)\r\n    document.addEventListener('mouseup', this.mouseUp)\r\n    document.addEventListener('mousemove', this.mouseMove)\r\n\r\n    this.canvas = document.querySelector('#myCanvas')\r\n    this.context = this.canvas.getContext('2d')\r\n    this.context.lineCap = 'round'\r\n    this.context.lineCap = 'round'\r\n    // this.canvas.width = 700\r\n    // this.canvas.height = 600\r\n    this.canvas.width = this.field_w\r\n    this.canvas.height = this.field_h\r\n    this.context.lineWidth = this.weightNum\r\n    this.context.strokeStyle = this.color\r\n  },\r\n  beforeUnmount () {\r\n  // beforeDestroy () {\r\n    console.log('MOUNT LISTENER OFF')\r\n    document.removeEventListener('mouseup', this.mouseUp)\r\n    document.removeEventListener('mousemove', this.mouseMove)\r\n  },\r\n  methods: {\r\n\r\n    // 図形を動かすフラグを立てる\r\n    move (e, i) {\r\n      this.isMove = true\r\n      this.selectIdx = i\r\n      e.preventDefault()\r\n    },\r\n    // マウスのクリックが終わった段階で初期化\r\n    mouseUp (e) {\r\n      this.isMove = false\r\n      this.beforeMouseX = null\r\n      this.beforeMouseY = null\r\n      e.preventDefault()\r\n    },\r\n    // move中は前回まで動かした差分を取りながら座標を変化させていく\r\n    mouseMove (e) {\r\n      if (!this.isMove) return\r\n      var mouseX = e.offsetX * this.ratio + this.dx\r\n      var mouseY = e.offsetY * this.ratio + this.dy\r\n      var dx = 0\r\n      var dy = 0\r\n      if (this.beforeMouseX && this.beforeMouseY) {\r\n          dx = mouseX - this.beforeMouseX\r\n          dy = mouseY - this.beforeMouseY\r\n      }\r\n      this.beforeMouseX = mouseX\r\n      this.beforeMouseY = mouseY\r\n      var tempX = dx + Number(this.coords[this.selectIdx].x)\r\n      var tempY = dy + Number(this.coords[this.selectIdx].y)\r\n      //var tempX = dx + Number(this.polygons[this.selectIdx].x)\r\n      //var tempY = dy + Number(this.polygons[this.selectIdx].y)\r\n      if (tempX > 0) this.coords[this.selectIdx].x = tempX\r\n      if (tempY > 0) this.coords[this.selectIdx].y = tempY\r\n      e.preventDefault()\r\n    },\r\n    // 描画\r\n    draw :function(e) {\r\n      // let x = e.layerX\r\n      // let y = e.layerY\r\n      let x = e.offsetX\r\n      let y = e.offsetY\r\n      if(!this.isDrag) return;\r\n      this.context.lineTo(x, y);\r\n      this.context.stroke();\r\n    },\r\n    // 描画開始（mousedown）\r\n    dragStart:function(e) {\r\n      // let x = e.layerX\r\n      // let y = e.layerY\r\n      let x = e.offsetX\r\n      let y = e.offsetY\r\n      this.context.beginPath();\r\n      this.context.lineTo(x, y);\r\n      this.context.stroke();\r\n      this.isDrag = true;\r\n      // this.context.getImageData(0, 0, this.canvas.width, this.canvas.height)\r\n\r\n    },\r\n    // 描画終了（mouseup, mouseout）\r\n    dragEnd: function() {\r\n      this.context.closePath();\r\n      this.isDrag = false;\r\n    },\r\n    clear: function() {\r\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    },\r\n    // ペンモード（黒）\r\n  penBlack: function(){\r\n    // カーソル変更\r\n    this.canvasMode = 'penBlack'\r\n \r\n    // 描画設定\r\n    this.context.lineCap = 'round';\r\n    this.context.lineJoin = 'round';\r\n    this.context.lineWidth = 5;\r\n    this.context.strokeStyle = '#000000';\r\n  },\r\n  // ペンモード（赤）\r\n  penRed: function(){\r\n    // カーソル変更\r\n    this.canvasMode = 'penRed'\r\n \r\n    // 描画設定\r\n    this.context.lineCap = 'round';\r\n    this.context.lineJoin = 'round';\r\n    this.context.lineWidth = 5;\r\n    this.context.strokeStyle = '#FF0000';\r\n  },\r\n  // ペンモード（青）\r\n  penBlue: function(){\r\n    // カーソル変更\r\n    this.canvasMode = 'penBlue'\r\n \r\n    // 描画設定\r\n    this.context.lineCap = 'round';\r\n    this.context.lineJoin = 'round';\r\n    this.context.lineWidth = 5;\r\n    this.context.strokeStyle = '#0000FF';\r\n  },\r\n    // 消しゴムモード\r\n    eraser: function() {\r\n      // カーソル変更\r\n      this.canvasMode = 'eraser'\r\n \r\n      // 描画設定\r\n      this.context.lineCap = 'square';\r\n      this.context.lineJoin = 'square';\r\n      this.context.lineWidth = 30;\r\n      this.context.strokeStyle = '#FFFFFF';\r\n    }\r\n  },\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n* {\r\n  text-align: center;\r\n}\r\n\r\n#myCanvas {\r\n border: 1px solid #000000;\r\n /* width: 60%;\r\n height: 250%; */\r\n\r\n background-size: contain;\r\n background-image: url('~@/assets/field.jpg');\r\n background-repeat:no-repeat;\r\n}\r\n\r\n.eraser {\r\n  cursor: url(../assets/eraser.png) 15 15,auto;\r\n}\r\n/* .board {\r\n  /* background-color: silver; */\r\n  /* height: 1000px; */\r\n/* } */\r\n\r\n/* .circle {\r\n  z-index: 10;\r\n} */\r\n\r\n/* .board-area {\r\n  /* width : 60%; */\r\n  /* height: 200%; */\r\n/* }  */\r\n\r\n/* svg {\r\n  width : 60%;\r\n  height: 200%;\r\n  background-size: contain;\r\n  /* background: url('~@/assets/field.jpg'); */\r\n  /* background-image: url('~@/assets/field.jpg');\r\n  background-repeat:no-repeat;\r\n  padding-bottom: 40%;\r\n} */ \r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}