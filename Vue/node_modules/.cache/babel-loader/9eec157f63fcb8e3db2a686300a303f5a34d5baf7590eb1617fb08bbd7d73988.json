{"ast":null,"code":"import { normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, createStaticVNode as _createStaticVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-39d2ff82\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createStaticVNode(\"<div id=\\\"tool-area\\\" data-v-39d2ff82><!-- &lt;button id=&quot;move-arc-button&quot; @click=&quot;moveArc&quot;&gt;ドラッグ&lt;/button&gt;\\r\\n      &lt;button id=&quot;pen-black-button&quot; @click=&quot;penBlack&quot;&gt;ペン（黒）&lt;/button&gt;\\r\\n      &lt;button id=&quot;pen-red-button&quot; @click=&quot;penRed&quot;&gt;ペン（赤）&lt;/button&gt;\\r\\n      &lt;button id=&quot;pen-blue-button&quot; @click=&quot;penBlue&quot;&gt;ペン（青）&lt;/button&gt;\\r\\n      &lt;button id=&quot;eraser-button&quot; @click=&quot;eraser&quot; &gt;消しゴム&lt;/button&gt;\\r\\n      &lt;button id=&quot;clear-button&quot; @click=&quot;clear&quot;&gt;クリア&lt;/button&gt; --><fieldset data-v-39d2ff82><input id=\\\"move-arc-button\\\" class=\\\"radio-inline__input\\\" type=\\\"radio\\\" checked=\\\"checked\\\" data-v-39d2ff82><label class=\\\"radio-inline__label\\\" for=\\\"move-arc-button\\\" data-v-39d2ff82> DRAG </label><input id=\\\"pen-black-button\\\" class=\\\"radio-inline__input\\\" type=\\\"radio\\\" data-v-39d2ff82><label class=\\\"radio-inline__label\\\" for=\\\"pen-black-button\\\" data-v-39d2ff82> BLACK </label><input id=\\\"pen-red-button\\\" class=\\\"radio-inline__input\\\" type=\\\"radio\\\" data-v-39d2ff82><label class=\\\"radio-inline__label\\\" for=\\\"pen-red-button\\\" data-v-39d2ff82> RED </label><input id=\\\"pen-blue-button\\\" class=\\\"radio-inline__input\\\" type=\\\"radio\\\" data-v-39d2ff82><label class=\\\"radio-inline__label\\\" for=\\\"pen-blue-button\\\" data-v-39d2ff82> BLUE </label><input id=\\\"eraser-button\\\" class=\\\"radio-inline__input\\\" type=\\\"radio\\\" data-v-39d2ff82><label class=\\\"radio-inline__label\\\" for=\\\"eraser-button\\\" data-v-39d2ff82> ERASE </label></fieldset></div>\", 1);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", {\n    id: \"myCanvas\",\n    class: _normalizeClass({\n      eraser: $data.canvasMode === 'eraser'\n    }),\n    ref: \"myCanvas\",\n    onMousedown: _cache[0] || (_cache[0] = (...args) => $options.dragStart && $options.dragStart(...args)),\n    onMouseup: _cache[1] || (_cache[1] = (...args) => $options.dragEnd && $options.dragEnd(...args)),\n    onMouseout: _cache[2] || (_cache[2] = (...args) => $options.dragEnd && $options.dragEnd(...args)),\n    onMousemove: _cache[3] || (_cache[3] = (...args) => $options.draw && $options.draw(...args))\n  }, null, 34 /* CLASS, HYDRATE_EVENTS */), _hoisted_2]);\n}","map":{"version":3,"mappings":";;;EACOA,KAAK,EAAC;AAAW;;;uBAAtBC,oBAiCM,OAjCNC,UAiCM,GAhCJC,oBAAyK;IAAjKC,EAAE,EAAC,UAAU;IAAEJ,KAAK;MAAAK,QAAWC,gBAAU;IAAA;IAAgBC,GAAG,EAAC,UAAU;IAAEC,WAAS,yCAAEC,iDAAS;IAAGC,SAAO,yCAAED,6CAAO;IAAGE,UAAQ,yCAAEF,6CAAO;IAAGG,WAAS,yCAAEH,uCAAI;4CAC9JI,UA8BM","names":["class","_createElementBlock","_hoisted_1","_createElementVNode","id","eraser","$data","ref","onMousedown","$options","onMouseup","onMouseout","onMousemove","_hoisted_2"],"sourceRoot":"","sources":["C:\\Users\\20t333\\Documents\\実験2\\Football-Tactical-Board\\Vue\\src\\components\\CanvasField.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <canvas id=\"myCanvas\" :class=\"{eraser: canvasMode === 'eraser'}\" ref=\"myCanvas\" @mousedown=\"dragStart\" @mouseup=\"dragEnd\" @mouseout=\"dragEnd\" @mousemove=\"draw\"></canvas>\r\n    <div id=\"tool-area\">\r\n      <!-- <button id=\"move-arc-button\" @click=\"moveArc\">ドラッグ</button>\r\n      <button id=\"pen-black-button\" @click=\"penBlack\">ペン（黒）</button>\r\n      <button id=\"pen-red-button\" @click=\"penRed\">ペン（赤）</button>\r\n      <button id=\"pen-blue-button\" @click=\"penBlue\">ペン（青）</button>\r\n      <button id=\"eraser-button\" @click=\"eraser\" >消しゴム</button>\r\n      <button id=\"clear-button\" @click=\"clear\">クリア</button> -->\r\n\r\n      <fieldset>\r\n        <input id=\"move-arc-button\" class=\"radio-inline__input\" type=\"radio\" checked=\"checked\"/>\r\n        <label class=\"radio-inline__label\" for=\"move-arc-button\">\r\n            DRAG\r\n        </label>\r\n        <input id=\"pen-black-button\" class=\"radio-inline__input\" type=\"radio\"/>\r\n        <label class=\"radio-inline__label\" for=\"pen-black-button\">\r\n            BLACK\r\n        </label>\r\n        <input id=\"pen-red-button\" class=\"radio-inline__input\" type=\"radio\"/>\r\n        <label class=\"radio-inline__label\" for=\"pen-red-button\">\r\n            RED\r\n        </label>\r\n        <input id=\"pen-blue-button\" class=\"radio-inline__input\" type=\"radio\"/>\r\n        <label class=\"radio-inline__label\" for=\"pen-blue-button\">\r\n            BLUE\r\n        </label>\r\n        <input id=\"eraser-button\" class=\"radio-inline__input\" type=\"radio\"/>\r\n        <label class=\"radio-inline__label\" for=\"eraser-button\">\r\n            ERASE\r\n        </label>\r\n      </fieldset>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n  props: ['results'],\r\n  data () {\r\n    return {\r\n      ratio: 1,\r\n      dx: 0,\r\n      dy: 0,\r\n      isMove: false,\r\n      beforeMouseX: null,\r\n      beforeMouseY: null,\r\n      coords: [],\r\n      selectIdx: 0,\r\n      radius: window.innerWidth / 150,\r\n      field_w: window.innerWidth * 0.6,\r\n      field_h: window.innerWidth * 0.39,\r\n      weightNum: 5,\r\n      stroke: 'black',\r\n      canvas: null,\r\n      context: null,\r\n      canvasMode: 'penBlack',\r\n    } \r\n  },\r\n  watch: {\r\n    results: function() {\r\n      this.coords = this.results      \r\n      this.canvasMode = \"drag\"\r\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    },\r\n    coords: function() {\r\n      // 円の描画\r\n      for (let i = 0; i < this.coords.length; i++) {\r\n        this.context.beginPath()\r\n        this.context.arc(parseInt(this.coords[i].x * this.field_w / 115), parseInt(this.coords[i].y * this.field_h / 75), this.radius, 0, 2 * Math.PI)\r\n        this.context.fillStyle = this.coords[i].color\r\n        this.context.fill()\r\n        this.context.lineWidth = 2\r\n        this.context.strokeStyle = this.stroke\r\n        this.context.stroke()\r\n      }\r\n    }\r\n\r\n  },  \r\n  mounted () {\r\n    this.canvas = document.querySelector('#myCanvas')\r\n    this.context = this.canvas.getContext('2d')\r\n    this.context.lineCap = 'round'\r\n    this.context.lineCap = 'round'\r\n    this.canvas.width = this.field_w\r\n    this.canvas.height = this.field_h\r\n    this.context.lineWidth = this.weightNum\r\n    this.context.strokeStyle = this.stroke\r\n    \r\n    console.log(\"field-width : \", this.field_w)\r\n    console.log(\"field-height : \", this.field_h)\r\n  },\r\n  methods: {\r\n    // 描画\r\n    draw :function(e) {\r\n      let x = e.offsetX\r\n      let y = e.offsetY\r\n      if(!this.isDrag) return;\r\n\r\n      // dragモード\r\n      if (this.canvasMode == \"drag\") {\r\n        \r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        // this.context.clearRect(parseInt(this.coords[this.selectIdx].x * this.field_w / 115) - this.radius, parseInt(this.coords[this.selectIdx].y * this.field_h / 75) - this.radius, this.radius * 3, this.radius * 3);\r\n        // this.context.clearRect(this.beforeMouseX - this.radius, this.beforeMouseY - this.radius, this.radius * 5, this.radius * 5);        \r\n\r\n        if (!this.isMove) return\r\n        var mouseX = x * this.ratio + this.dx\r\n        var mouseY = y * this.ratio + this.dy\r\n        var dx = 0\r\n        var dy = 0\r\n        if (this.beforeMouseX && this.beforeMouseY) {\r\n            dx = mouseX - this.beforeMouseX\r\n            dy = mouseY - this.beforeMouseY\r\n        }\r\n        this.beforeMouseX = mouseX\r\n        this.beforeMouseY = mouseY\r\n        var tempX = (dx  / this.field_w * 115) + Number(this.coords[this.selectIdx].x)\r\n        var tempY = (dy / this.field_h * 75) + Number(this.coords[this.selectIdx].y)\r\n        if (tempX > 0) this.coords[this.selectIdx].x = tempX\r\n        if (tempY > 0) this.coords[this.selectIdx].y = tempY\r\n\r\n        for (let i = 0; i < this.coords.length; i++) {\r\n          \r\n          this.context.beginPath()\r\n          this.context.arc(parseInt(this.coords[i].x * this.field_w / 115), parseInt(this.coords[i].y * this.field_h / 75), this.radius, 0, 2 * Math.PI)\r\n          this.context.fillStyle = this.coords[i].color\r\n          this.context.fill()\r\n          this.context.lineWidth = 2\r\n          this.context.strokeStyle = this.stroke\r\n          this.context.stroke()\r\n        }\r\n      } else { // dragモード以外\r\n        this.context.lineTo(x, y);\r\n        this.context.stroke();\r\n      }\r\n    },\r\n    // 描画開始（mousedown）\r\n    dragStart:function(e) {\r\n      if (this.canvasMode == \"drag\") {\r\n        this.isMove = true\r\n        var minDistance = 1000\r\n        var minIdx\r\n\r\n        // クリックした位置に最も近い円のインデックスを取得\r\n        for (var i = 0; i < this.coords.length; i++) {\r\n          var dataX = parseInt(this.coords[i].x * this.field_w / 115)\r\n          var dataY = parseInt(this.coords[i].y * this.field_h / 75)\r\n          var mouseX = e.offsetX\r\n          var mouseY = e.offsetY\r\n          var distance = Math.sqrt( Math.pow( mouseX-dataX, 2 ) + Math.pow( mouseY-dataY, 2 ) )\r\n          if (distance < minDistance) {\r\n            minDistance = distance\r\n            minIdx = i\r\n          }\r\n        }\r\n        console.log(\"Selected index : \", minIdx)\r\n        this.selectIdx = minIdx\r\n      } else {\r\n        let x = e.offsetX\r\n        let y = e.offsetY\r\n        this.context.beginPath();\r\n        this.context.lineTo(x, y);\r\n        this.context.stroke();\r\n      }\r\n      this.isDrag = true;\r\n    },\r\n    // 描画終了（mouseup, mouseout）\r\n    dragEnd: function() {\r\n      if (this.canvasMode == \"drag\") {\r\n        this.isMove = false\r\n        this.beforeMouseX = null\r\n        this.beforeMouseY = null\r\n      }\r\n\r\n      this.isDrag = false;\r\n    },\r\n    clear: function() {\r\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    },\r\n    // ドラッグモード\r\n    moveArc: function() {\r\n      this.canvasMode = 'drag'\r\n      this.context.strokeStyle = '#00000000';\r\n      // this.context.strokeStyle = '#000';\r\n    },\r\n    // ペンモード（黒）\r\n    penBlack: function(){\r\n      // カーソル変更\r\n      this.canvasMode = 'penBlack'\r\n  \r\n      // 描画設定\r\n      this.context.lineCap = 'round';\r\n      this.context.lineJoin = 'round';\r\n      this.context.lineWidth = 5;\r\n      this.context.strokeStyle = '#000000';\r\n    },\r\n    // ペンモード（赤）\r\n    penRed: function(){\r\n      // カーソル変更\r\n      this.canvasMode = 'penRed'\r\n  \r\n      // 描画設定\r\n      this.context.lineCap = 'round';\r\n      this.context.lineJoin = 'round';\r\n      this.context.lineWidth = 5;\r\n      this.context.strokeStyle = '#FF0000';\r\n    },\r\n    // ペンモード（青）\r\n    penBlue: function(){\r\n      // カーソル変更\r\n      this.canvasMode = 'penBlue'\r\n  \r\n      // 描画設定\r\n      this.context.lineCap = 'round';\r\n      this.context.lineJoin = 'round';\r\n      this.context.lineWidth = 5;\r\n      this.context.strokeStyle = '#0000FF';\r\n    },\r\n    // 消しゴムモード\r\n    eraser: function() {\r\n      // カーソル変更\r\n      this.canvasMode = 'eraser'\r\n \r\n      // 描画設定\r\n      this.context.lineCap = 'square';\r\n      this.context.lineJoin = 'square';\r\n      this.context.lineWidth = 30;\r\n      this.context.strokeStyle = '#FFFFFF';\r\n    }\r\n  },\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n* {\r\n  text-align: center;\r\n}\r\n\r\n#myCanvas {\r\n background-size: contain;\r\n background-image: url('~@/assets/field.jpg');\r\n background-repeat:no-repeat;\r\n}\r\n\r\n.eraser {\r\n  cursor: url(../assets/eraser.png) 15 15,auto;\r\n}\r\n\r\nfieldset {\r\n  border: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  text-align: center;\r\n}\r\n\r\nh1 {\r\n  margin: 0;\r\n  line-height: 1.2;\r\n}\r\n\r\np {\r\n  margin: 0 0 1.6rem;\r\n  padding-bottom: 0.2rem;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.radio-inline__input {\r\n    clip: rect(1px, 1px, 1px, 1px);\r\n    position: absolute !important;\r\n}\r\n\r\n.radio-inline__label {\r\n    display: inline-block;\r\n    padding: 0.5rem 1rem;\r\n    margin-right: 18px;\r\n    border-radius: 3px;\r\n    transition: all .2s;\r\n}\r\n\r\n.radio-inline__input + .radio-inline__label {\r\n    /* background: #B54A4A; */\r\n    border: 1px solid #fff;\r\n    color: #fff;\r\n    text-shadow: 0 0 1px rgba(0,0,0,.7);\r\n}\r\n\r\n.radio-inline__input:focus + .radio-inline__label {\r\n    /* outline-color: #4D90FE; */\r\n    background: #B54A4A;\r\n    /* outline-offset: -2px;\r\n    outline-style: auto;\r\n    outline-width: 5px; */\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}