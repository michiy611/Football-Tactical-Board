{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nconst API_URL = 'http://127.0.0.1:5000';\nexport default {\n  // delimiters: ['[[', ']]'],\n  // props: ['results'],\n  data() {\n    return {\n      src: null,\n      image: [],\n      time: 0,\n      isLoading: false,\n      uploadedImage: '',\n      results: []\n    };\n  },\n  methods: {\n    handleFileSelect(event) {\n      // reset data\n      this.src = null;\n      // this.thumbnails = []\n      this.selected = 0;\n\n      // varidate file\n      const file = event.target.files[0];\n      if (!file || !file.type.match('video/*')) return;\n\n      // read file\n      const reader = new FileReader();\n      reader.onload = evt => {\n        this.src = evt.target.result;\n        this.isLoading = false;\n      };\n      reader.readAsDataURL(file);\n      this.isLoading = true;\n    },\n    // 動画を停止してその時点での画像を取得\n    onUploadImage() {\n      let self = this;\n      this.image = [];\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d');\n      const video = document.getElementById(\"video\");\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      this.time = video.currentTime;\n      // console.log(Math.ceil(this.time))\n      video.pause();\n      context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);\n      this.image.push(canvas.toDataURL('image/png'));\n\n      // let reader = new FileReader()\n      // reader.onload = (e) => {\n      //   this.uploadedImage = e.target.result\n      // }\n\n      // console.log(this.uploadedImage)\n      // reader.readAsDataURL(this.image)\n\n      // 画像をサーバーへアップロード\n      var params = new FormData();\n      params.append('image', this.image);\n      // params.append('image', this.uploadedImage)\n      // Axiosを用いてFormData化したデータをFlaskへPostしています。\n      axios.post(`${API_URL}/detect`, params).then(function (response) {\n        self.results = response.data.results;\n        for (const result of self.results) {\n          console.log(result);\n        }\n        self.$emit('my-click', self.results);\n      });\n\n      // this.$parent.results = this.results\n    }\n  }\n};","map":{"version":3,"mappings":";AAYA,OAAOA,KAAI,MAAO,OAAM;AAExB,MAAMC,OAAM,GAAI,uBAAsB;AAEtC,eAAe;EACb;EACA;EACAC,IAAI,GAAG;IACL,OAAO;MACLC,GAAG,EAAE,IAAI;MACTC,KAAK,EAAE,EAAE;MACTC,IAAI,EAAE,CAAC;MACPC,SAAS,EAAE,KAAK;MAChBC,aAAa,EAAE,EAAE;MACjBC,OAAO,EAAE;IACX;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,gBAAgB,CAACC,KAAK,EAAE;MACtB;MACA,IAAI,CAACR,GAAE,GAAI,IAAG;MACd;MACA,IAAI,CAACS,QAAO,GAAI;;MAEhB;MACA,MAAMC,IAAG,GAAIF,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC;MACjC,IAAI,CAACF,IAAG,IAAK,CAACA,IAAI,CAACG,IAAI,CAACC,KAAK,CAAC,SAAS,CAAC,EAAE;;MAE1C;MACA,MAAMC,MAAK,GAAI,IAAIC,UAAU,EAAC;MAC9BD,MAAM,CAACE,MAAK,GAAKC,GAAG,IAAK;QACvB,IAAI,CAAClB,GAAE,GAAIkB,GAAG,CAACP,MAAM,CAACQ,MAAK;QAC3B,IAAI,CAAChB,SAAQ,GAAI,KAAI;MACvB;MACAY,MAAM,CAACK,aAAa,CAACV,IAAI;MACzB,IAAI,CAACP,SAAQ,GAAI,IAAG;IACtB,CAAC;IACD;IACAkB,aAAa,GAAG;MACd,IAAIC,IAAG,GAAI,IAAG;MACd,IAAI,CAACrB,KAAI,GAAI,EAAC;MACd,MAAMsB,MAAK,GAAIC,QAAQ,CAACC,aAAa,CAAC,QAAQ;MAC9C,MAAMC,OAAM,GAAIH,MAAM,CAACI,UAAU,CAAC,IAAI;MACtC,MAAMC,KAAI,GAAIJ,QAAQ,CAACK,cAAc,CAAC,OAAO;MAE7CN,MAAM,CAACO,KAAI,GAAIF,KAAK,CAACG,UAAS;MAC9BR,MAAM,CAACS,MAAK,GAAIJ,KAAK,CAACK,WAAU;MAChC,IAAI,CAAC/B,IAAG,GAAI0B,KAAK,CAACM,WAAU;MAC5B;MACAN,KAAK,CAACO,KAAK,EAAC;MACZT,OAAO,CAACU,SAAS,CAACR,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEA,KAAK,CAACG,UAAU,EAAEH,KAAK,CAACK,WAAW;MAClE,IAAI,CAAChC,KAAK,CAACoC,IAAI,CAACd,MAAM,CAACe,SAAS,CAAC,WAAW,CAAC;;MAE7C;MACA;MACA;MACA;;MAEA;MACA;;MAEA;MACA,IAAIC,MAAK,GAAI,IAAIC,QAAQ,EAAC;MAC1BD,MAAM,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAACxC,KAAK;MACjC;MACA;MACAJ,KAAK,CAAC6C,IAAI,CAAE,GAAE5C,OAAQ,SAAQ,EAAEyC,MAAM,CAAC,CAACI,IAAI,CAAC,UAAUC,QAAQ,EAAE;QAC/DtB,IAAI,CAACjB,OAAM,GAAIuC,QAAQ,CAAC7C,IAAI,CAACM,OAAO;QACpC,KAAK,MAAMc,MAAK,IAAKG,IAAI,CAACjB,OAAO,EAAE;UACjCwC,OAAO,CAACC,GAAG,CAAC3B,MAAM;QACpB;QACAG,IAAI,CAACyB,KAAK,CAAC,UAAU,EAAEzB,IAAI,CAACjB,OAAO;MACrC,CAAC;;MAED;IACF;EACF;AACF","names":["axios","API_URL","data","src","image","time","isLoading","uploadedImage","results","methods","handleFileSelect","event","selected","file","target","files","type","match","reader","FileReader","onload","evt","result","readAsDataURL","onUploadImage","self","canvas","document","createElement","context","getContext","video","getElementById","width","videoWidth","height","videoHeight","currentTime","pause","drawImage","push","toDataURL","params","FormData","append","post","then","response","console","log","$emit"],"sourceRoot":"","sources":["C:\\Users\\20t333\\Documents\\実験2\\Football-Tactical-Board\\frontend\\src\\components\\CreateImage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <label class=\"input-area\" for=\"input-video\">{{ isLoading ? 'Loading...' : 'Upload Video'}}</label>\r\n    <input id=\"input-video\" type=\"file\" accept=\"video/mp4,video/x-m4v\" @change=\"handleFileSelect\">\r\n    <video controls v-if=\"src\" id=\"video\">\r\n      <source :src=\"src\" type='video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"'>\r\n    </video>\r\n    <a class=\"btn uploadbtn\" @click=\"onUploadImage()\"><span>Capture this moment!!!</span></a>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\n\r\nconst API_URL = 'http://127.0.0.1:5000'\r\n\r\nexport default {\r\n  // delimiters: ['[[', ']]'],\r\n  // props: ['results'],\r\n  data() {\r\n    return {\r\n      src: null,\r\n      image: [],\r\n      time: 0,\r\n      isLoading: false,\r\n      uploadedImage: '',\r\n      results: []\r\n    }\r\n  },\r\n  methods: {\r\n    handleFileSelect(event) {\r\n      // reset data\r\n      this.src = null\r\n      // this.thumbnails = []\r\n      this.selected = 0\r\n      \r\n      // varidate file\r\n      const file = event.target.files[0]\r\n      if (!file || !file.type.match('video/*')) return\r\n\r\n      // read file\r\n      const reader = new FileReader()\r\n      reader.onload = (evt) => {\r\n        this.src = evt.target.result\r\n        this.isLoading = false\r\n      }\r\n      reader.readAsDataURL(file)\r\n      this.isLoading = true\r\n    },\r\n    // 動画を停止してその時点での画像を取得\r\n    onUploadImage() {\r\n      let self = this\r\n      this.image = []\r\n      const canvas = document.createElement('canvas')\r\n      const context = canvas.getContext('2d')\r\n      const video = document.getElementById(\"video\")\r\n\r\n      canvas.width = video.videoWidth\r\n      canvas.height = video.videoHeight\r\n      this.time = video.currentTime\r\n      // console.log(Math.ceil(this.time))\r\n      video.pause()\r\n      context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight)\r\n      this.image.push(canvas.toDataURL('image/png'))\r\n\r\n      // let reader = new FileReader()\r\n      // reader.onload = (e) => {\r\n      //   this.uploadedImage = e.target.result\r\n      // }\r\n\r\n      // console.log(this.uploadedImage)\r\n      // reader.readAsDataURL(this.image)\r\n\r\n      // 画像をサーバーへアップロード\r\n      var params = new FormData()\r\n      params.append('image', this.image)\r\n      // params.append('image', this.uploadedImage)\r\n      // Axiosを用いてFormData化したデータをFlaskへPostしています。\r\n      axios.post(`${API_URL}/detect`, params).then(function (response) {\r\n        self.results = response.data.results;\r\n        for (const result of self.results) {\r\n          console.log(result)\r\n        }\r\n        self.$emit('my-click', self.results)\r\n      })\r\n\r\n      // this.$parent.results = this.results\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.input-area {\r\n  background: #20262E;\r\n  border-radius: 4px;\r\n  padding: 20px;\r\n  transition: all 0.2s;\r\n  /* width: 100%; */\r\n}\r\n\r\ninput {\r\n  display: none;\r\n}\r\n\r\nlabel {\r\n  font-size: 2em;\r\n  display: block;\r\n  cursor: pointer;\r\n  width: 60%;\r\n  padding: 10px;\r\n  text-align: center;\r\n  color: #ccc;\r\n  border: 2px dashed #ccc;\r\n  background: #eee;\r\n  box-sizing: border-box;\r\n  transition: all 0.2s ease-out;\r\n  margin-left: 20%;\r\n  margin-bottom: 1.5em;\r\n}\r\n\r\nlabel:hover {\r\n  background: #fafafa;\r\n  padding: 20px 10px;\r\n}\r\n\r\nvideo {\r\n  display: block;\r\n  max-width: 50%;\r\n  margin: 10px auto;\r\n}\r\n\r\n.btn\r\n{\r\n  font-size: 1.6rem;\r\n  font-weight: 700;\r\n  line-height: 1.5;\r\n  position: relative;\r\n  display: inline-block;\r\n  padding: 1rem 4rem;\r\n  cursor: pointer;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n  -webkit-transition: all 0.3s;\r\n  transition: all 0.3s;\r\n  text-align: center;\r\n  vertical-align: middle;\r\n  text-decoration: none;\r\n  letter-spacing: 0.1em;\r\n  color: #212529;\r\n  border-radius: 0.5rem;\r\n}\r\n\r\n.uploadbtn {\r\n  overflow: hidden;\r\n\r\n  padding: 1.5em 6em;\r\n\r\n  color: #fff;\r\n  border-radius: 0;\r\n  background: #000;\r\n}\r\n\r\n.uploadbtn span {\r\n  position: relative;\r\n}\r\n\r\n.uploadbtn:before {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n\r\n  width: 100px;\r\n  height: 100px;\r\n\r\n  content: '';\r\n  -webkit-transition: all .5s ease-in-out;\r\n  transition: all .5s ease-in-out;\r\n  -webkit-transform: translateX(-80%) translateY(-25px);\r\n  transform: translateX(-80%) translateY(-25px);\r\n\r\n  border-radius: 50%;\r\n  background: #eb6100;\r\n}\r\n\r\n.uploadbtn:hover:before {\r\n  width: 400px;\r\n  height: 400px;\r\n\r\n  -webkit-transform: translateX(-1%) translateY(-175px);\r\n\r\n  transform: translateX(-1%) translateY(-175px);\r\n}\r\n\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}