{"ast":null,"code":"export default {\n  data() {\n    return {\n      work_video: null,\n      matching_image_side: '28',\n      matching_image: null,\n      uploadVideoUrl: ''\n    };\n  },\n  methods: {\n    onVideoPicked(file) {\n      if (file !== undefined && file !== null) {\n        if (file.name.lastIndexOf('.') <= 0) {\n          return;\n        }\n        const fr = new FileReader();\n        fr.readAsDataURL(file);\n        fr.addEventListener('load', () => {\n          this.uploadVideoUrl = fr.result;\n        });\n      } else {\n        this.uploadVideoUrl = '';\n      }\n    },\n    clip(event) {\n      const video = document.getElementById('upload-video');\n      const canvas = document.getElementById('c');\n\n      // 実際のビデオサイズ\n      const orgVideoWidth = video.videoWidth;\n      const orgVideoHeight = video.videoHeight;\n\n      // ブラウザ上の表示サイズ\n      const eleVideoWidth = video.width;\n      const eleVideoHeight = video.height;\n\n      // 割合を計算して処理していく\n      const widthRatio = orgVideoWidth / eleVideoWidth;\n      const heightRatio = orgVideoHeight / eleVideoHeight;\n\n      // カーソルの枠分ピクセルを調整\n      const pointX = event.offsetX + 3;\n      const pointY = event.offsetY + 3;\n      const srcX = pointX * widthRatio;\n      const srcY = pointY * heightRatio;\n      canvas.getContext('2d').drawImage(video, srcX, srcY, this.matching_image_side, this.matching_image_side, 0, 0, this.matching_image_side, this.matching_image_side);\n    },\n    async post() {\n      const blobPromise = new Promise(function (resolve, reject) {\n        const canvas = document.getElementById('c');\n        canvas.toBlob(function (blob) {\n          resolve(blob);\n        }, 'image/jpeg', 1.0);\n      });\n      const formData = new FormData();\n      formData.append('image', await blobPromise, 'test.jpg');\n\n      // API で切り抜いた画像をアップロードできる\n      // await this.$axios.post('/api/test', formData, {\n      //   headers: {\n      //     'Content-Type': 'multipart/form-data'\n      //   }\n      // })\n    }\n  }\n};","map":{"version":3,"mappings":"AA8CA,eAAe;EACbA,IAAI,GAAG;IACL,OAAO;MACLC,UAAU,EAAE,IAAI;MAChBC,mBAAmB,EAAE,IAAI;MACzBC,cAAc,EAAE,IAAI;MACpBC,cAAc,EAAE;IAClB;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,aAAa,CAACC,IAAI,EAAE;MAClB,IAAIA,IAAG,KAAMC,SAAQ,IAAKD,IAAG,KAAM,IAAI,EAAE;QACvC,IAAIA,IAAI,CAACE,IAAI,CAACC,WAAW,CAAC,GAAG,KAAK,CAAC,EAAE;UACnC;QACF;QACA,MAAMC,EAAC,GAAI,IAAIC,UAAU,EAAC;QAC1BD,EAAE,CAACE,aAAa,CAACN,IAAI;QACrBI,EAAE,CAACG,gBAAgB,CAAC,MAAM,EAAE,MAAM;UAChC,IAAI,CAACV,cAAa,GAAIO,EAAE,CAACI,MAAK;QAChC,CAAC;MACH,OAAO;QACL,IAAI,CAACX,cAAa,GAAI,EAAC;MACzB;IACF,CAAC;IACDY,IAAI,CAACC,KAAK,EAAE;MACV,MAAMC,KAAI,GAAIC,QAAQ,CAACC,cAAc,CAAC,cAAc;MACpD,MAAMC,MAAK,GAAIF,QAAQ,CAACC,cAAc,CAAC,GAAG;;MAE1C;MACA,MAAME,aAAY,GAAIJ,KAAK,CAACK,UAAS;MACrC,MAAMC,cAAa,GAAIN,KAAK,CAACO,WAAU;;MAEvC;MACA,MAAMC,aAAY,GAAIR,KAAK,CAACS,KAAI;MAChC,MAAMC,cAAa,GAAIV,KAAK,CAACW,MAAK;;MAElC;MACA,MAAMC,UAAS,GAAIR,aAAY,GAAII,aAAY;MAC/C,MAAMK,WAAU,GAAIP,cAAa,GAAII,cAAa;;MAElD;MACA,MAAMI,MAAK,GAAIf,KAAK,CAACgB,OAAM,GAAI;MAC/B,MAAMC,MAAK,GAAIjB,KAAK,CAACkB,OAAM,GAAI;MAE/B,MAAMC,IAAG,GAAIJ,MAAK,GAAIF,UAAS;MAC/B,MAAMO,IAAG,GAAIH,MAAK,GAAIH,WAAU;MAEhCV,MAAK,CACFiB,UAAU,CAAC,IAAI,EACfC,SAAS,CACRrB,KAAK,EACLkB,IAAI,EACJC,IAAI,EACJ,IAAI,CAACnC,mBAAmB,EACxB,IAAI,CAACA,mBAAmB,EACxB,CAAC,EACD,CAAC,EACD,IAAI,CAACA,mBAAmB,EACxB,IAAI,CAACA,mBAAkB,CACzB;IACJ,CAAC;IACD,MAAMsC,IAAI,GAAG;MACX,MAAMC,WAAU,GAAI,IAAIC,OAAO,CAAC,UAASC,OAAO,EAAEC,MAAM,EAAE;QACxD,MAAMvB,MAAK,GAAIF,QAAQ,CAACC,cAAc,CAAC,GAAG;QAC1CC,MAAM,CAACwB,MAAM,CACX,UAASC,IAAI,EAAE;UACbH,OAAO,CAACG,IAAI;QACd,CAAC,EACD,YAAY,EACZ,GAAE,CACJ;MACF,CAAC;MAED,MAAMC,QAAO,GAAI,IAAIC,QAAQ,EAAC;MAC9BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,MAAMR,WAAW,EAAE,UAAU;;MAEtD;MACA;MACA;MACA;MACA;MACA;IACF;EACF;AACF","names":["data","work_video","matching_image_side","matching_image","uploadVideoUrl","methods","onVideoPicked","file","undefined","name","lastIndexOf","fr","FileReader","readAsDataURL","addEventListener","result","clip","event","video","document","getElementById","canvas","orgVideoWidth","videoWidth","orgVideoHeight","videoHeight","eleVideoWidth","width","eleVideoHeight","height","widthRatio","heightRatio","pointX","offsetX","pointY","offsetY","srcX","srcY","getContext","drawImage","post","blobPromise","Promise","resolve","reject","toBlob","blob","formData","FormData","append"],"sourceRoot":"","sources":["C:\\Users\\20t333\\Documents\\実験2\\Football-Tactical-Board\\frontend\\src\\components\\MovieToImage.vue"],"sourcesContent":["<template>\r\n  <v-row justify=\"center\">\r\n    <v-col sm=\"12\" md=\"11\" lg=\"9\" xl=\"6\">\r\n      <v-sheet class=\"pa-3\">\r\n        <h1>動画のマウスクリックによる一部切り出し</h1>\r\n        <v-form ref=\"form\">\r\n          <video\r\n            v-if=\"uploadVideoUrl\"\r\n            id=\"upload-video\"\r\n            class=\"clipable\"\r\n            controls\r\n            width=\"640\"\r\n            height=\"360\"\r\n            @click=\"clip\"\r\n          >\r\n            <source :src=\"uploadVideoUrl\" />\r\n            このブラウザではビデオ表示がサポートされていません\r\n          </video>\r\n          <v-file-input\r\n            v-model=\"work_video\"\r\n            accept=\"video/*\"\r\n            show-size\r\n            label=\"適当な動画ファイルを選択してください\"\r\n            prepend-icon=\"mdi-video\"\r\n            @change=\"onVideoPicked\"\r\n          ></v-file-input>\r\n          <canvas\r\n            id=\"c\"\r\n            :width=\"matching_image_side\"\r\n            :height=\"matching_image_side\"\r\n          ></canvas>\r\n          <span v-if=\"uploadVideoUrl\"\r\n            >※動画をクリックして選択箇所を画像に切り出します</span\r\n          >\r\n        </v-form>\r\n        <v-row align=\"center\" justify=\"center\" class=\"mt-12 mb-4 px-5\">\r\n          <v-btn outlined color=\"iconcolor\" rounded block @click=\"post\"\r\n            >サーバにPOSTする予定ボタン</v-btn\r\n          >\r\n        </v-row>\r\n      </v-sheet>\r\n    </v-col>\r\n  </v-row>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      work_video: null,\r\n      matching_image_side: '28',\r\n      matching_image: null,\r\n      uploadVideoUrl: ''\r\n    }\r\n  },\r\n  methods: {\r\n    onVideoPicked(file) {\r\n      if (file !== undefined && file !== null) {\r\n        if (file.name.lastIndexOf('.') <= 0) {\r\n          return\r\n        }\r\n        const fr = new FileReader()\r\n        fr.readAsDataURL(file)\r\n        fr.addEventListener('load', () => {\r\n          this.uploadVideoUrl = fr.result\r\n        })\r\n      } else {\r\n        this.uploadVideoUrl = ''\r\n      }\r\n    },\r\n    clip(event) {\r\n      const video = document.getElementById('upload-video')\r\n      const canvas = document.getElementById('c')\r\n\r\n      // 実際のビデオサイズ\r\n      const orgVideoWidth = video.videoWidth\r\n      const orgVideoHeight = video.videoHeight\r\n\r\n      // ブラウザ上の表示サイズ\r\n      const eleVideoWidth = video.width\r\n      const eleVideoHeight = video.height\r\n\r\n      // 割合を計算して処理していく\r\n      const widthRatio = orgVideoWidth / eleVideoWidth\r\n      const heightRatio = orgVideoHeight / eleVideoHeight\r\n\r\n      // カーソルの枠分ピクセルを調整\r\n      const pointX = event.offsetX + 3\r\n      const pointY = event.offsetY + 3\r\n\r\n      const srcX = pointX * widthRatio\r\n      const srcY = pointY * heightRatio\r\n\r\n      canvas\r\n        .getContext('2d')\r\n        .drawImage(\r\n          video,\r\n          srcX,\r\n          srcY,\r\n          this.matching_image_side,\r\n          this.matching_image_side,\r\n          0,\r\n          0,\r\n          this.matching_image_side,\r\n          this.matching_image_side\r\n        )\r\n    },\r\n    async post() {\r\n      const blobPromise = new Promise(function(resolve, reject) {\r\n        const canvas = document.getElementById('c')\r\n        canvas.toBlob(\r\n          function(blob) {\r\n            resolve(blob)\r\n          },\r\n          'image/jpeg',\r\n          1.0\r\n        )\r\n      })\r\n\r\n      const formData = new FormData()\r\n      formData.append('image', await blobPromise, 'test.jpg')\r\n\r\n      // API で切り抜いた画像をアップロードできる\r\n      // await this.$axios.post('/api/test', formData, {\r\n      //   headers: {\r\n      //     'Content-Type': 'multipart/form-data'\r\n      //   }\r\n      // })\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}