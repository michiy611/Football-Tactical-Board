{"ast":null,"code":"export default {\n  props: ['results'],\n  data() {\n    return {\n      ratio: 1,\n      dx: 0,\n      dy: 0,\n      viewport: '0 0 500 500',\n      isMove: false,\n      beforeMouseX: null,\n      beforeMouseY: null,\n      selectIdx: 0,\n      radius: window.innerWidth / 150,\n      coords: [],\n      stroke: 'black',\n      field_w: window.innerWidth * 0.6,\n      field_h: window.innerWidth * 0.39,\n      weightNum: 5,\n      canvas: null,\n      pen_color: \"black\",\n      context: null,\n      canvasMode: 'penBlack'\n    };\n  },\n  watch: {\n    results: function () {\n      this.coords = this.results;\n      this.canvasMode = \"drag\";\n    }\n  },\n  // マウス操作関連\n  mounted() {\n    console.log('MOUNT LISTENER ON');\n    console.log(this.field_w);\n    console.log(this.field_h);\n    document.addEventListener('mouseup', this.mouseUp);\n    document.addEventListener('mousemove', this.mouseMove);\n    this.canvas = document.querySelector('#myCanvas');\n    this.context = this.canvas.getContext('2d');\n    this.context.lineCap = 'round';\n    this.context.lineCap = 'round';\n    // this.canvas.width = 700\n    // this.canvas.height = 600\n    this.canvas.width = this.field_w;\n    this.canvas.height = this.field_h;\n    this.context.lineWidth = this.weightNum;\n    this.context.strokeStyle = this.color;\n  },\n  beforeUnmount() {\n    // beforeDestroy () {\n    console.log('MOUNT LISTENER OFF');\n    document.removeEventListener('mouseup', this.mouseUp);\n    document.removeEventListener('mousemove', this.mouseMove);\n  },\n  methods: {\n    // 図形を動かすフラグを立てる\n    // move (e) {\n    //   this.isMove = true\n    //   var minDistance = 1000\n    //   for (var i = 0; i < this.coords.length; i++) {\n    //     var dataX = parseInt(this.coords[i].x * this.field_w / 115)\n    //     var dataY = parseInt(this.coords[i].y * this.field_h / 75)\n    //     var mouseX = e.offsetX\n    //     var mouseY = e.offsetY\n    //     var distance = Math.sqrt( Math.pow( mouseX-dataX, 2 ) + Math.pow( mouseY-dataY, 2 ) )\n    //     if (distance < minDistance) {\n    //       minDistance = distance\n    //       var minIdx = i\n    //     }\n    //   }\n    //   this.selectIdx = minIdx\n    //   e.preventDefault()\n    // },\n    // マウスのクリックが終わった段階で初期化\n    // mouseUp (e) {\n    //   this.isMove = false\n    //   this.beforeMouseX = null\n    //   this.beforeMouseY = null\n    //   e.preventDefault()\n    // },\n    // move中は前回まで動かした差分を取りながら座標を変化させていく\n    // mouseMove (e) {\n    //   if (!this.isMove) return\n    //   var mouseX = e.offsetX * this.ratio + this.dx\n    //   var mouseY = e.offsetY * this.ratio + this.dy\n    //   var dx = 0\n    //   var dy = 0\n    //   if (this.beforeMouseX && this.beforeMouseY) {\n    //       dx = mouseX - this.beforeMouseX\n    //       dy = mouseY - this.beforeMouseY\n    //   }\n    //   this.beforeMouseX = mouseX\n    //   this.beforeMouseY = mouseY\n    //   var tempX = dx + Number(this.coords[this.selectIdx].x)\n    //   var tempY = dy + Number(this.coords[this.selectIdx].y)\n    //   //var tempX = dx + Number(this.polygons[this.selectIdx].x)\n    //   //var tempY = dy + Number(this.polygons[this.selectIdx].y)\n    //   if (tempX > 0) this.coords[this.selectIdx].x = tempX\n    //   if (tempY > 0) this.coords[this.selectIdx].y = tempY\n    //   e.preventDefault()\n    // },\n    // 描画\n    draw: function (e) {\n      let x = e.offsetX;\n      let y = e.offsetY;\n      if (!this.isDrag) return;\n      if (this.canvasMode == \"drag\") {\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        // this.context.clearRect(parseInt(this.coords[this.selectIdx].x * this.field_w / 115) - this.radius, parseInt(this.coords[this.selectIdx].y * this.field_h / 75) - this.radius, this.radius * 3, this.radius * 3);\n        // this.context.clearRect(this.beforeMouseX - this.radius, this.beforeMouseY - this.radius, this.radius * 5, this.radius * 5);        \n\n        if (!this.isMove) return;\n        var mouseX = x * this.ratio + this.dx;\n        var mouseY = y * this.ratio + this.dy;\n        var dx = 0;\n        var dy = 0;\n        if (this.beforeMouseX && this.beforeMouseY) {\n          dx = mouseX - this.beforeMouseX;\n          dy = mouseY - this.beforeMouseY;\n        }\n        this.beforeMouseX = mouseX;\n        this.beforeMouseY = mouseY;\n        var tempX = dx / this.field_w * 115 + Number(this.coords[this.selectIdx].x);\n        var tempY = dy / this.field_h * 75 + Number(this.coords[this.selectIdx].y);\n        if (tempX > 0) this.coords[this.selectIdx].x = tempX;\n        if (tempY > 0) this.coords[this.selectIdx].y = tempY;\n        for (let i = 0; i < this.coords.length; i++) {\n          this.context.beginPath();\n          this.context.arc(parseInt(this.coords[i].x * this.field_w / 115), parseInt(this.coords[i].y * this.field_h / 75), this.radius, 0, 2 * Math.PI);\n          this.context.fillStyle = this.coords[i].color;\n          this.context.fill();\n          this.context.lineWidth = 2;\n          this.context.strokeStyle = this.stroke;\n          this.context.stroke();\n        }\n\n        // console.log(this.coords[this.selectIdx].x)\n        // console.log(this.coords[this.selectIdx].y)\n        // console.log(tempX)\n        // console.log(tempY)\n      } else {\n        this.context.lineTo(x, y);\n        this.context.stroke();\n      }\n    },\n    // 描画開始（mousedown）\n    dragStart: function (e) {\n      if (this.canvasMode == \"drag\") {\n        this.isMove = true;\n        var minDistance = 1000;\n        var minIdx;\n        for (var i = 0; i < this.coords.length; i++) {\n          var dataX = parseInt(this.coords[i].x * this.field_w / 115);\n          var dataY = parseInt(this.coords[i].y * this.field_h / 75);\n          var mouseX = e.offsetX;\n          var mouseY = e.offsetY;\n          var distance = Math.sqrt(Math.pow(mouseX - dataX, 2) + Math.pow(mouseY - dataY, 2));\n          if (distance < minDistance) {\n            minDistance = distance;\n            minIdx = i;\n          }\n        }\n        console.log(minIdx);\n        this.selectIdx = minIdx;\n      } else {\n        let x = e.offsetX;\n        let y = e.offsetY;\n        this.context.beginPath();\n        this.context.lineTo(x, y);\n        this.context.stroke();\n      }\n      this.isDrag = true;\n    },\n    // 描画終了（mouseup, mouseout）\n    dragEnd: function () {\n      // this.context.closePath();\n      if (this.canvasMode == \"drag\") {\n        this.isMove = false;\n        this.beforeMouseX = null;\n        this.beforeMouseY = null;\n      }\n      this.isDrag = false;\n    },\n    clear: function () {\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    },\n    // ドラッグモード\n    moveArc: function () {\n      this.canvasMode = 'drag';\n      this.context.strokeStyle = '#00000000';\n      // this.context.strokeStyle = '#000';\n    },\n\n    // ペンモード（黒）\n    penBlack: function () {\n      // カーソル変更\n      this.canvasMode = 'penBlack';\n\n      // 描画設定\n      this.context.lineCap = 'round';\n      this.context.lineJoin = 'round';\n      this.context.lineWidth = 5;\n      this.context.strokeStyle = '#000000';\n    },\n    // ペンモード（赤）\n    penRed: function () {\n      // カーソル変更\n      this.canvasMode = 'penRed';\n\n      // 描画設定\n      this.context.lineCap = 'round';\n      this.context.lineJoin = 'round';\n      this.context.lineWidth = 5;\n      this.context.strokeStyle = '#FF0000';\n    },\n    // ペンモード（青）\n    penBlue: function () {\n      // カーソル変更\n      this.canvasMode = 'penBlue';\n\n      // 描画設定\n      this.context.lineCap = 'round';\n      this.context.lineJoin = 'round';\n      this.context.lineWidth = 5;\n      this.context.strokeStyle = '#0000FF';\n    },\n    // 消しゴムモード\n    eraser: function () {\n      // カーソル変更\n      this.canvasMode = 'eraser';\n\n      // 描画設定\n      this.context.lineCap = 'square';\n      this.context.lineJoin = 'square';\n      this.context.lineWidth = 30;\n      this.context.strokeStyle = '#FFFFFF';\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["props","data","ratio","dx","dy","viewport","isMove","beforeMouseX","beforeMouseY","selectIdx","radius","window","innerWidth","coords","stroke","field_w","field_h","weightNum","canvas","pen_color","context","canvasMode","watch","results","mounted","console","log","document","addEventListener","mouseUp","mouseMove","querySelector","getContext","lineCap","width","height","lineWidth","strokeStyle","color","beforeUnmount","removeEventListener","methods","draw","e","x","offsetX","y","offsetY","isDrag","clearRect","mouseX","mouseY","tempX","Number","tempY","i","length","beginPath","arc","parseInt","Math","PI","fillStyle","fill","lineTo","dragStart","minDistance","minIdx","dataX","dataY","distance","sqrt","pow","dragEnd","clear","moveArc","penBlack","lineJoin","penRed","penBlue","eraser"],"sourceRoot":"","sources":["C:\\Users\\20t333\\Documents\\実験2\\Football-Tactical-Board\\frontend\\src\\components\\CanvasField.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- SVG定義 -->\r\n\r\n    <!-- <div class=\"board\"> -->\r\n      <!-- <div class=\"board-area\"> -->\r\n        <canvas id=\"myCanvas\" :class=\"{eraser: canvasMode === 'eraser'}\" ref=\"myCanvas\" @mousedown=\"dragStart\" @mouseup=\"dragEnd\" @mouseout=\"dragEnd\" @mousemove=\"draw\">\r\n      <!-- <svg class=\"circle\"> -->\r\n          <!-- <arc v-for=\"(r, idx) in coords\" :key=\"idx\"\r\n            @mousedown=\"move($event, idx)\"\r\n            :fill=\"r.color\" :stroke=\"stroke\"\r\n            :x=\"parseInt(r.x * field_w / 115)\" :y=\"parseInt(r.y * field_h / 75)\" :r=\"radius\">\r\n          </arc> -->\r\n      <!-- </svg> -->\r\n        </canvas>\r\n        <div id=\"tool-area\">\r\n          <button id=\"move-arc-button\" @click=\"moveArc\">矢印</button>\r\n          <button id=\"pen-black-button\" @click=\"penBlack\">ペン（黒）</button>\r\n          <button id=\"pen-red-button\" @click=\"penRed\">ペン（赤）</button>\r\n          <button id=\"pen-blue-button\" @click=\"penBlue\">ペン（青）</button>\r\n          <button id=\"eraser-button\" @click=\"eraser\" >消しゴム</button>\r\n          <button id=\"clear-button\" @click=\"clear\">クリア</button>\r\n        </div>\r\n      <!-- </div> -->\r\n    <!-- </div> -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n  props: ['results'],\r\n  data () {\r\n    return {\r\n      ratio: 1,\r\n      dx: 0,\r\n      dy: 0,\r\n      viewport: '0 0 500 500',\r\n      isMove: false,\r\n      beforeMouseX: null,\r\n      beforeMouseY: null,\r\n      selectIdx: 0,\r\n      radius: window.innerWidth / 150,\r\n      coords: [],\r\n      stroke: 'black',\r\n      field_w: window.innerWidth * 0.6,\r\n      field_h: window.innerWidth * 0.39,\r\n\r\n      weightNum: 5,\r\n      canvas: null,\r\n      pen_color: \"black\",\r\n      context: null,\r\n      canvasMode: 'penBlack',\r\n    } \r\n  },\r\n  watch: {\r\n    results: function() {\r\n      this.coords = this.results      \r\n      this.canvasMode = \"drag\"\r\n    },\r\n  },  \r\n  // マウス操作関連\r\n  mounted () {\r\n    console.log('MOUNT LISTENER ON')\r\n    console.log(this.field_w)\r\n    console.log(this.field_h)\r\n    document.addEventListener('mouseup', this.mouseUp)\r\n    document.addEventListener('mousemove', this.mouseMove)\r\n\r\n    this.canvas = document.querySelector('#myCanvas')\r\n    this.context = this.canvas.getContext('2d')\r\n    this.context.lineCap = 'round'\r\n    this.context.lineCap = 'round'\r\n    // this.canvas.width = 700\r\n    // this.canvas.height = 600\r\n    this.canvas.width = this.field_w\r\n    this.canvas.height = this.field_h\r\n    this.context.lineWidth = this.weightNum\r\n    this.context.strokeStyle = this.color\r\n  },\r\n  beforeUnmount () {\r\n  // beforeDestroy () {\r\n    console.log('MOUNT LISTENER OFF')\r\n    document.removeEventListener('mouseup', this.mouseUp)\r\n    document.removeEventListener('mousemove', this.mouseMove)\r\n  },\r\n  methods: {\r\n\r\n    // 図形を動かすフラグを立てる\r\n    // move (e) {\r\n    //   this.isMove = true\r\n    //   var minDistance = 1000\r\n    //   for (var i = 0; i < this.coords.length; i++) {\r\n    //     var dataX = parseInt(this.coords[i].x * this.field_w / 115)\r\n    //     var dataY = parseInt(this.coords[i].y * this.field_h / 75)\r\n    //     var mouseX = e.offsetX\r\n    //     var mouseY = e.offsetY\r\n    //     var distance = Math.sqrt( Math.pow( mouseX-dataX, 2 ) + Math.pow( mouseY-dataY, 2 ) )\r\n    //     if (distance < minDistance) {\r\n    //       minDistance = distance\r\n    //       var minIdx = i\r\n    //     }\r\n    //   }\r\n    //   this.selectIdx = minIdx\r\n    //   e.preventDefault()\r\n    // },\r\n    // マウスのクリックが終わった段階で初期化\r\n    // mouseUp (e) {\r\n    //   this.isMove = false\r\n    //   this.beforeMouseX = null\r\n    //   this.beforeMouseY = null\r\n    //   e.preventDefault()\r\n    // },\r\n    // move中は前回まで動かした差分を取りながら座標を変化させていく\r\n    // mouseMove (e) {\r\n    //   if (!this.isMove) return\r\n    //   var mouseX = e.offsetX * this.ratio + this.dx\r\n    //   var mouseY = e.offsetY * this.ratio + this.dy\r\n    //   var dx = 0\r\n    //   var dy = 0\r\n    //   if (this.beforeMouseX && this.beforeMouseY) {\r\n    //       dx = mouseX - this.beforeMouseX\r\n    //       dy = mouseY - this.beforeMouseY\r\n    //   }\r\n    //   this.beforeMouseX = mouseX\r\n    //   this.beforeMouseY = mouseY\r\n    //   var tempX = dx + Number(this.coords[this.selectIdx].x)\r\n    //   var tempY = dy + Number(this.coords[this.selectIdx].y)\r\n    //   //var tempX = dx + Number(this.polygons[this.selectIdx].x)\r\n    //   //var tempY = dy + Number(this.polygons[this.selectIdx].y)\r\n    //   if (tempX > 0) this.coords[this.selectIdx].x = tempX\r\n    //   if (tempY > 0) this.coords[this.selectIdx].y = tempY\r\n    //   e.preventDefault()\r\n    // },\r\n    // 描画\r\n    draw :function(e) {\r\n      let x = e.offsetX\r\n      let y = e.offsetY\r\n      if(!this.isDrag) return;\r\n\r\n      if (this.canvasMode == \"drag\") {\r\n        \r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        // this.context.clearRect(parseInt(this.coords[this.selectIdx].x * this.field_w / 115) - this.radius, parseInt(this.coords[this.selectIdx].y * this.field_h / 75) - this.radius, this.radius * 3, this.radius * 3);\r\n        // this.context.clearRect(this.beforeMouseX - this.radius, this.beforeMouseY - this.radius, this.radius * 5, this.radius * 5);        \r\n\r\n        if (!this.isMove) return\r\n        var mouseX = x * this.ratio + this.dx\r\n        var mouseY = y * this.ratio + this.dy\r\n        var dx = 0\r\n        var dy = 0\r\n        if (this.beforeMouseX && this.beforeMouseY) {\r\n            dx = mouseX - this.beforeMouseX\r\n            dy = mouseY - this.beforeMouseY\r\n        }\r\n        this.beforeMouseX = mouseX\r\n        this.beforeMouseY = mouseY\r\n        var tempX = (dx  / this.field_w * 115) + Number(this.coords[this.selectIdx].x)\r\n        var tempY = (dy / this.field_h * 75) + Number(this.coords[this.selectIdx].y)\r\n        if (tempX > 0) this.coords[this.selectIdx].x = tempX\r\n        if (tempY > 0) this.coords[this.selectIdx].y = tempY\r\n\r\n        for (let i = 0; i < this.coords.length; i++) {\r\n          \r\n          this.context.beginPath()\r\n          this.context.arc(parseInt(this.coords[i].x * this.field_w / 115), parseInt(this.coords[i].y * this.field_h / 75), this.radius, 0, 2 * Math.PI)\r\n          this.context.fillStyle = this.coords[i].color\r\n          this.context.fill()\r\n          this.context.lineWidth = 2\r\n          this.context.strokeStyle = this.stroke\r\n          this.context.stroke()\r\n        }\r\n        \r\n        // console.log(this.coords[this.selectIdx].x)\r\n        // console.log(this.coords[this.selectIdx].y)\r\n        // console.log(tempX)\r\n        // console.log(tempY)\r\n      } else {\r\n        this.context.lineTo(x, y);\r\n        this.context.stroke();\r\n      }\r\n    },\r\n    // 描画開始（mousedown）\r\n    dragStart:function(e) {\r\n      if (this.canvasMode == \"drag\") {\r\n        this.isMove = true\r\n        var minDistance = 1000\r\n        var minIdx\r\n        for (var i = 0; i < this.coords.length; i++) {\r\n          var dataX = parseInt(this.coords[i].x * this.field_w / 115)\r\n          var dataY = parseInt(this.coords[i].y * this.field_h / 75)\r\n          var mouseX = e.offsetX\r\n          var mouseY = e.offsetY\r\n          var distance = Math.sqrt( Math.pow( mouseX-dataX, 2 ) + Math.pow( mouseY-dataY, 2 ) )\r\n          if (distance < minDistance) {\r\n            minDistance = distance\r\n            minIdx = i\r\n          }\r\n        }\r\n        console.log(minIdx)\r\n        this.selectIdx = minIdx\r\n      } else {\r\n        let x = e.offsetX\r\n        let y = e.offsetY\r\n        this.context.beginPath();\r\n        this.context.lineTo(x, y);\r\n        this.context.stroke();\r\n      }\r\n      this.isDrag = true;\r\n    },\r\n    // 描画終了（mouseup, mouseout）\r\n    dragEnd: function() {\r\n      // this.context.closePath();\r\n      if (this.canvasMode == \"drag\") {\r\n        this.isMove = false\r\n        this.beforeMouseX = null\r\n        this.beforeMouseY = null\r\n      }\r\n\r\n      this.isDrag = false;\r\n    },\r\n    clear: function() {\r\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    },\r\n    // ドラッグモード\r\n    moveArc: function() {\r\n      this.canvasMode = 'drag'\r\n      this.context.strokeStyle = '#00000000';\r\n      // this.context.strokeStyle = '#000';\r\n    },\r\n    // ペンモード（黒）\r\n    penBlack: function(){\r\n      // カーソル変更\r\n      this.canvasMode = 'penBlack'\r\n  \r\n      // 描画設定\r\n      this.context.lineCap = 'round';\r\n      this.context.lineJoin = 'round';\r\n      this.context.lineWidth = 5;\r\n      this.context.strokeStyle = '#000000';\r\n    },\r\n    // ペンモード（赤）\r\n    penRed: function(){\r\n      // カーソル変更\r\n      this.canvasMode = 'penRed'\r\n  \r\n      // 描画設定\r\n      this.context.lineCap = 'round';\r\n      this.context.lineJoin = 'round';\r\n      this.context.lineWidth = 5;\r\n      this.context.strokeStyle = '#FF0000';\r\n    },\r\n    // ペンモード（青）\r\n    penBlue: function(){\r\n      // カーソル変更\r\n      this.canvasMode = 'penBlue'\r\n  \r\n      // 描画設定\r\n      this.context.lineCap = 'round';\r\n      this.context.lineJoin = 'round';\r\n      this.context.lineWidth = 5;\r\n      this.context.strokeStyle = '#0000FF';\r\n    },\r\n    // 消しゴムモード\r\n    eraser: function() {\r\n      // カーソル変更\r\n      this.canvasMode = 'eraser'\r\n \r\n      // 描画設定\r\n      this.context.lineCap = 'square';\r\n      this.context.lineJoin = 'square';\r\n      this.context.lineWidth = 30;\r\n      this.context.strokeStyle = '#FFFFFF';\r\n    }\r\n  },\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n* {\r\n  text-align: center;\r\n}\r\n\r\n#myCanvas {\r\n /* border: 1px solid #000000; */\r\n /* width: 60%;\r\n height: 250%; */\r\n\r\n background-size: contain;\r\n background-image: url('~@/assets/field.jpg');\r\n background-repeat:no-repeat;\r\n}\r\n\r\n.eraser {\r\n  cursor: url(../assets/eraser.png) 15 15,auto;\r\n}\r\n/* .board {\r\n  /* background-color: silver; */\r\n  /* height: 1000px; */\r\n/* } */\r\n\r\n/* .circle {\r\n  z-index: 10;\r\n} */\r\n\r\n/* .board-area {\r\n  /* width : 60%; */\r\n  /* height: 200%; */\r\n/* }  */\r\n\r\n/* svg {\r\n  width : 60%;\r\n  height: 200%;\r\n  background-size: contain;\r\n  /* background: url('~@/assets/field.jpg'); */\r\n  /* background-image: url('~@/assets/field.jpg');\r\n  background-repeat:no-repeat;\r\n  padding-bottom: 40%;\r\n} */ \r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}