{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-5f6fa82f\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"input-area\"\n};\nconst _hoisted_2 = {\n  for: \"input-video\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  controls: \"\"\n};\nconst _hoisted_4 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"label\", _hoisted_2, _toDisplayString($data.isLoading ? '読み込み中...' : '動画を選択'), 1 /* TEXT */), _createElementVNode(\"input\", {\n    id: \"input-video\",\n    type: \"file\",\n    accept: \"video/mp4,video/x-m4v\",\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.handleFileSelect && $options.handleFileSelect(...args))\n  }, null, 32 /* HYDRATE_EVENTS */), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.onUploadMovie && $options.onUploadMovie(...args))\n  }, \"submit\"), $data.src ? (_openBlock(), _createElementBlock(\"video\", _hoisted_3, [_createElementVNode(\"source\", {\n    src: $data.src,\n    type: \"video/mp4; codecs=\\\"avc1.42E01E, mp4a.40.2\\\"\"\n  }, null, 8 /* PROPS */, _hoisted_4)])) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"mappings":";;;EAESA,KAAK,EAAC;AAAY;;EACdC,GAAG,EAAC;AAAa;;;EAGjBC,QAAQ,EAAR;;;;uBALXC,oBASM,cARJC,oBAOM,OAPNC,UAOM,GANJD,oBAAsE,SAAtEE,UAAsE,mBAA1CC,eAAS,yCACrCH,oBAA8F;IAAvFI,EAAE,EAAC,aAAa;IAACC,IAAI,EAAC,MAAM;IAACC,MAAM,EAAC,uBAAuB;IAAEC,QAAM,yCAAEC,+DAAgB;qCAC5FR,oBAA8C;IAArCS,OAAK,yCAAED,yDAAa;KAAE,QAAM,GACfL,SAAG,kBAAzBJ,oBAEQ,SAFRW,UAEQ,GADNV,oBAAqE;IAA5DW,GAAG,EAAER,SAAG;IAAEE,IAAI,EAAC","names":["class","for","controls","_createElementBlock","_createElementVNode","_hoisted_1","_hoisted_2","$data","id","type","accept","onChange","$options","onClick","_hoisted_3","src"],"sourceRoot":"","sources":["C:\\Users\\20t333\\Documents\\実験2\\Football-Tactical-Board\\frontend\\src\\components\\UploadMovie.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"input-area\">\r\n      <label for=\"input-video\">{{ isLoading ? '読み込み中...' : '動画を選択'}}</label>\r\n      <input id=\"input-video\" type=\"file\" accept=\"video/mp4,video/x-m4v\" @change=\"handleFileSelect\">\r\n      <button @click='onUploadMovie'>submit</button>\r\n      <video controls v-if=\"src\">\r\n        <source :src=\"src\" type='video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"'>\r\n      </video>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\n\r\nconst API_URL = 'http://127.0.0.1:5000'\r\nexport default {\r\n  data () {\r\n    return {\r\n      src: '',\r\n      isLoading: false\r\n    }\r\n  },\r\n  methods: {\r\n    // ファイルのチェックと読み込み\r\n    handleFileSelect(event) {  \r\n      // ファイルのチェック\r\n      const file = event.target.files[0]\r\n      if (!file || !file.type.match('video/*')) return\r\n      // ファイルの読み込み\r\n      const reader = new FileReader()\r\n      reader.onload = (evt) => {\r\n        this.src = evt.target.result\r\n        // this.createThumbnails(this.src)\r\n        this.isLoading = false\r\n      }\r\n      reader.readAsDataURL(file)\r\n      this.isLoading = true\r\n    },\r\n    // 動画をサーバーへアップロード\r\n    onUploadMovie () {\r\n      var params = new FormData()\r\n      params.append('video', this.src)\r\n      // Axiosを用いてFormData化したデータをFlaskへPostしています。\r\n      axios.post(`${API_URL}/classification`, params).then(function (response) {\r\n        console.log(response)\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.input-area {\r\n  background: #20262E;\r\n  border-radius: 4px;\r\n  padding: 20px;\r\n  transition: all 0.2s;\r\n}\r\n\r\ninput {\r\n  display: none;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  cursor: pointer;\r\n  width: 100%;\r\n  padding: 10px;\r\n  text-align: center;\r\n  color: #ccc;\r\n  border: 2px dashed #ccc;\r\n  background: #eee;\r\n  box-sizing: border-box;\r\n  transition: all 0.2s ease-out;\r\n}\r\n\r\nlabel:hover {\r\n  background: #fafafa;\r\n  padding: 20px 10px;\r\n}\r\n\r\nvideo {\r\n  display: block;\r\n  max-width: 50%;\r\n  margin: 10px auto;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}