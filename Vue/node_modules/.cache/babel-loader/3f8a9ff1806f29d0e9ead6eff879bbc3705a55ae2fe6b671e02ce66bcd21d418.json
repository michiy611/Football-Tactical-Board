{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-39d2ff82\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"board\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" SVG定義 \"), _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" <div class=\\\"board-area\\\"> \"), _createElementVNode(\"canvas\", {\n    id: \"myCanvas\",\n    onMousedown: _cache[0] || (_cache[0] = (...args) => $options.dragStart && $options.dragStart(...args)),\n    onMouseup: _cache[1] || (_cache[1] = (...args) => $options.dragEnd && $options.dragEnd(...args)),\n    onMouseout: _cache[2] || (_cache[2] = (...args) => $options.dragEnd && $options.dragEnd(...args)),\n    onMousemove: _cache[3] || (_cache[3] = (...args) => $options.draw && $options.draw(...args))\n  }, [_createCommentVNode(\" <svg class=\\\"circle\\\">\\r\\n        <circle v-for=\\\"(r, idx) in coords\\\" :key=\\\"idx\\\"\\r\\n          @mousedown=\\\"move($event, idx)\\\"\\r\\n          :fill=\\\"r.color\\\" :stroke=\\\"stroke\\\"\\r\\n          :cx=\\\"parseInt(r.x * field_w / 115)\\\" :cy=\\\"parseInt(r.y * field_h / 75)\\\" :r=\\\"radius\\\">\\r\\n        </circle>\\r\\n      </svg> \")], 32 /* HYDRATE_EVENTS */), _createCommentVNode(\" </div> \")])]);\n}","map":{"version":3,"mappings":";;;EACOA,KAAK,EAAC;AAAW;;EAGfA,KAAK,EAAC;AAAO;;uBAHpBC,oBAgBM,OAhBNC,UAgBM,GAfJC,8BAAc,EAEdC,oBAYM,OAZNC,UAYM,GAXJF,mDAAiC,EAC/BC,oBAQS;IARDE,EAAE,EAAC,UAAU;IAAEC,WAAS,yCAAEC,iDAAS;IAAGC,SAAO,yCAAED,6CAAO;IAAGE,UAAQ,yCAAEF,6CAAO;IAAGG,WAAS,yCAAEH,uCAAI;MACtGL,wVAMU,6BAEVA,+BAAe","names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","id","onMousedown","$options","onMouseup","onMouseout","onMousemove"],"sourceRoot":"","sources":["C:\\Users\\20t333\\Documents\\実験2\\Football-Tactical-Board\\frontend\\src\\components\\CanvasField.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- SVG定義 -->\r\n\r\n    <div class=\"board\">\r\n      <!-- <div class=\"board-area\"> -->\r\n        <canvas id=\"myCanvas\" @mousedown=\"dragStart\" @mouseup=\"dragEnd\" @mouseout=\"dragEnd\" @mousemove=\"draw\">\r\n      <!-- <svg class=\"circle\">\r\n        <circle v-for=\"(r, idx) in coords\" :key=\"idx\"\r\n          @mousedown=\"move($event, idx)\"\r\n          :fill=\"r.color\" :stroke=\"stroke\"\r\n          :cx=\"parseInt(r.x * field_w / 115)\" :cy=\"parseInt(r.y * field_h / 75)\" :r=\"radius\">\r\n        </circle>\r\n      </svg> -->\r\n        </canvas>\r\n      <!-- </div> -->\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n  props: ['results'],\r\n  data () {\r\n    return {\r\n      ratio: 1,\r\n      dx: 0,\r\n      dy: 0,\r\n      viewport: '0 0 500 500',\r\n      isMove: false,\r\n      beforeMouseX: null,\r\n      beforeMouseY: null,\r\n      selectIdx: 0,\r\n      radius: window.innerWidth / 150,\r\n      coords: [],\r\n      stroke: 'black',\r\n      field_w: window.innerWidth * 0.6,\r\n      field_h: window.innerWidth * 0.39,\r\n\r\n      canvas: null,\r\n      context: null,\r\n      isDrag: false\r\n    } \r\n  },\r\n  watch: {\r\n    results: function() {\r\n      this.coords = this.results\r\n    }\r\n  },  \r\n  // マウス操作関連\r\n  mounted () {\r\n    console.log('MOUNT LISTENER ON')\r\n    console.log(this.field_w)\r\n    console.log(this.field_h)\r\n    document.addEventListener('mouseup', this.mouseUp)\r\n    document.addEventListener('mousemove', this.mouseMove)\r\n\r\n    this.canvas = document.querySelector('#myCanvas')\r\n    this.context = this.canvas.getContext('2d')\r\n    this.context.lineCap = 'round';\r\n    this.context.lineJoin = 'round';\r\n    this.context.lineWidth = 5;\r\n    this.context.strokeStyle = '#000000'\r\n  },\r\n  beforeUnmount () {\r\n  // beforeDestroy () {\r\n    console.log('MOUNT LISTENER OFF')\r\n    document.removeEventListener('mouseup', this.mouseUp)\r\n    document.removeEventListener('mousemove', this.mouseMove)\r\n  },\r\n  methods: {\r\n\r\n    // 図形を動かすフラグを立てる\r\n    move (e, i) {\r\n      this.isMove = true\r\n      this.selectIdx = i\r\n      e.preventDefault()\r\n    },\r\n    // マウスのクリックが終わった段階で初期化\r\n    mouseUp (e) {\r\n      this.isMove = false\r\n      this.beforeMouseX = null\r\n      this.beforeMouseY = null\r\n      e.preventDefault()\r\n    },\r\n    // move中は前回まで動かした差分を取りながら座標を変化させていく\r\n    mouseMove (e) {\r\n      if (!this.isMove) return\r\n      var mouseX = e.offsetX * this.ratio + this.dx\r\n      var mouseY = e.offsetY * this.ratio + this.dy\r\n      var dx = 0\r\n      var dy = 0\r\n      if (this.beforeMouseX && this.beforeMouseY) {\r\n          dx = mouseX - this.beforeMouseX\r\n          dy = mouseY - this.beforeMouseY\r\n      }\r\n      this.beforeMouseX = mouseX\r\n      this.beforeMouseY = mouseY\r\n      var tempX = dx + Number(this.coords[this.selectIdx].x)\r\n      var tempY = dy + Number(this.coords[this.selectIdx].y)\r\n      //var tempX = dx + Number(this.polygons[this.selectIdx].x)\r\n      //var tempY = dy + Number(this.polygons[this.selectIdx].y)\r\n      if (tempX > 0) this.coords[this.selectIdx].x = tempX\r\n      if (tempY > 0) this.coords[this.selectIdx].y = tempY\r\n      e.preventDefault()\r\n    },\r\n    // 描画\r\n    draw (e) {\r\n      var x = e.layerX\r\n      var y = e.layerY\r\n \r\n      if(!this.isDrag) {\r\n        return;\r\n      }\r\n \r\n      this.context.lineTo(x, y);\r\n      this.context.stroke();\r\n    },\r\n    // 描画開始（mousedown）\r\n    dragStart (e) {\r\n      var x = e.layerX\r\n      var y = e.layerY\r\n \r\n      this.context.beginPath();\r\n      this.context.lineTo(x, y);\r\n      this.context.stroke();\r\n   \r\n      this.isDrag = true;\r\n    },\r\n    // 描画終了（mouseup, mouseout）\r\n    dragEnd () {\r\n      this.context.closePath();\r\n      this.isDrag = false;\r\n    }\r\n  },\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n* {\r\n  text-align: center;\r\n}\r\n\r\n#myCanvas {\r\n border: 1px solid #000000;\r\n width: 60%;\r\n height: 200%;\r\n\r\n /* background-size: contain;\r\n background-image: url('~@/assets/field.jpg');\r\n background-repeat:no-repeat; */\r\n}\r\n\r\n.board {\r\n  /* background-color: silver; */\r\n  height: 1000px;\r\n}\r\n\r\n/* .circle {\r\n  z-index: 10;\r\n} */\r\n\r\n/* .board-area {\r\n  /* width : 60%; */\r\n  /* height: 200%; */\r\n/* }  */\r\n\r\nsvg {\r\n  width : 60%;\r\n  height: 200%;\r\n  background-size: contain;\r\n  /* background: url('~@/assets/field.jpg'); */\r\n  background-image: url('~@/assets/field.jpg');\r\n  background-repeat:no-repeat;\r\n  padding-bottom: 40%;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}