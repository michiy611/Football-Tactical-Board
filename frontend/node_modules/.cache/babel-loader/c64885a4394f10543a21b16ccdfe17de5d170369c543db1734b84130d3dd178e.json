{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"動画のマウスクリックによる一部切り出し\", -1 /* HOISTED */);\nconst _hoisted_2 = [\"src\"];\nconst _hoisted_3 = [\"width\", \"height\"];\nconst _hoisted_4 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_file_input = _resolveComponent(\"v-file-input\");\n  const _component_v_form = _resolveComponent(\"v-form\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  const _component_v_sheet = _resolveComponent(\"v-sheet\");\n  const _component_v_col = _resolveComponent(\"v-col\");\n  return _openBlock(), _createBlock(_component_v_row, {\n    justify: \"center\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_col, {\n      sm: \"12\",\n      md: \"11\",\n      lg: \"9\",\n      xl: \"6\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_sheet, {\n        class: \"pa-3\"\n      }, {\n        default: _withCtx(() => [_hoisted_1, _createVNode(_component_v_form, {\n          ref: \"form\"\n        }, {\n          default: _withCtx(() => [$data.uploadVideoUrl ? (_openBlock(), _createElementBlock(\"video\", {\n            key: 0,\n            id: \"upload-video\",\n            class: \"clipable\",\n            controls: \"\",\n            width: \"640\",\n            height: \"360\",\n            onClick: _cache[0] || (_cache[0] = (...args) => $options.clip && $options.clip(...args))\n          }, [_createElementVNode(\"source\", {\n            src: $data.uploadVideoUrl\n          }, null, 8 /* PROPS */, _hoisted_2), _createTextVNode(\" このブラウザではビデオ表示がサポートされていません \")])) : _createCommentVNode(\"v-if\", true), _createVNode(_component_v_file_input, {\n            modelValue: $data.work_video,\n            \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.work_video = $event),\n            accept: \"video/*\",\n            \"show-size\": \"\",\n            label: \"適当な動画ファイルを選択してください\",\n            \"prepend-icon\": \"mdi-video\",\n            onChange: $options.onVideoPicked\n          }, null, 8 /* PROPS */, [\"modelValue\", \"onChange\"]), _createElementVNode(\"canvas\", {\n            id: \"c\",\n            width: $data.matching_image_side,\n            height: $data.matching_image_side\n          }, null, 8 /* PROPS */, _hoisted_3), $data.uploadVideoUrl ? (_openBlock(), _createElementBlock(\"span\", _hoisted_4, \"※動画をクリックして選択箇所を画像に切り出します\")) : _createCommentVNode(\"v-if\", true)]),\n          _: 1 /* STABLE */\n        }, 512 /* NEED_PATCH */), _createVNode(_component_v_row, {\n          align: \"center\",\n          justify: \"center\",\n          class: \"mt-12 mb-4 px-5\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_v_btn, {\n            outlined: \"\",\n            color: \"iconcolor\",\n            rounded: \"\",\n            block: \"\",\n            onClick: $options.post\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"サーバにPOSTする予定ボタン\")]),\n            _: 1 /* STABLE */\n          }, 8 /* PROPS */, [\"onClick\"])]),\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"mappings":";gCAIQA,oBAA4B,YAAxB,qBAAmB;;;;;;;;;;;;;uBAH7BC,aAyCQC;IAzCDC,OAAO,EAAC;EAAQ;sBACrB,MAuCQ,CAvCRC,aAuCQC;MAvCDC,EAAE,EAAC,IAAI;MAACC,EAAE,EAAC,IAAI;MAACC,EAAE,EAAC,GAAG;MAACC,EAAE,EAAC;;wBAC/B,MAqCU,CArCVL,aAqCUM;QArCDC,KAAK,EAAC;MAAM;0BACnB,MAA4B,CAA5BC,UAA4B,EAC5BR,aA6BSS;UA7BDC,GAAG,EAAC;QAAM;4BAChB,MAWQ,CAVAC,oBAAc,kBADtBC,oBAWQ;;YATNC,EAAE,EAAC,cAAc;YACjBN,KAAK,EAAC,UAAU;YAChBO,QAAQ,EAAR,EAAQ;YACRC,KAAK,EAAC,KAAK;YACXC,MAAM,EAAC,KAAK;YACXC,OAAK,yCAAEC,uCAAI;cAEZtB,oBAAgC;YAAvBuB,GAAG,EAAER;UAAc,sDAAI,6BAElC,0CACAX,aAOgBoB;wBANLT,gBAAU;uEAAVA,gBAAU;YACnBU,MAAM,EAAC,SAAS;YAChB,WAAS,EAAT,EAAS;YACTC,KAAK,EAAC,oBAAoB;YAC1B,cAAY,EAAC,WAAW;YACvBC,QAAM,EAAEL;+DAEXtB,oBAIU;YAHRiB,EAAE,EAAC,GAAG;YACLE,KAAK,EAAEJ,yBAAmB;YAC1BK,MAAM,EAAEL;+CAECA,oBAAc,kBAA1BC,oBAEC,oBADE,0BAAwB;;kCAG7BZ,aAIQF;UAJD0B,KAAK,EAAC,QAAQ;UAACzB,OAAO,EAAC,QAAQ;UAACQ,KAAK,EAAC;;4BAC3C,MAEC,CAFDP,aAECyB;YAFMC,QAAQ,EAAR,EAAQ;YAACC,KAAK,EAAC,WAAW;YAACC,OAAO,EAAP,EAAO;YAACC,KAAK,EAAL,EAAK;YAAEZ,OAAK,EAAEC;;8BACrD,MAAe,kBAAf,iBAAe","names":["_createElementVNode","_createBlock","_component_v_row","justify","_createVNode","_component_v_col","sm","md","lg","xl","_component_v_sheet","class","_hoisted_1","_component_v_form","ref","$data","_createElementBlock","id","controls","width","height","onClick","$options","src","_component_v_file_input","accept","label","onChange","align","_component_v_btn","outlined","color","rounded","block"],"sourceRoot":"","sources":["C:\\Users\\20t333\\Documents\\実験2\\Football-Tactical-Board\\frontend\\src\\components\\MovieToImage.vue"],"sourcesContent":["<template>\r\n  <v-row justify=\"center\">\r\n    <v-col sm=\"12\" md=\"11\" lg=\"9\" xl=\"6\">\r\n      <v-sheet class=\"pa-3\">\r\n        <h1>動画のマウスクリックによる一部切り出し</h1>\r\n        <v-form ref=\"form\">\r\n          <video\r\n            v-if=\"uploadVideoUrl\"\r\n            id=\"upload-video\"\r\n            class=\"clipable\"\r\n            controls\r\n            width=\"640\"\r\n            height=\"360\"\r\n            @click=\"clip\"\r\n          >\r\n            <source :src=\"uploadVideoUrl\" />\r\n            このブラウザではビデオ表示がサポートされていません\r\n          </video>\r\n          <v-file-input\r\n            v-model=\"work_video\"\r\n            accept=\"video/*\"\r\n            show-size\r\n            label=\"適当な動画ファイルを選択してください\"\r\n            prepend-icon=\"mdi-video\"\r\n            @change=\"onVideoPicked\"\r\n          ></v-file-input>\r\n          <canvas\r\n            id=\"c\"\r\n            :width=\"matching_image_side\"\r\n            :height=\"matching_image_side\"\r\n          ></canvas>\r\n          <span v-if=\"uploadVideoUrl\"\r\n            >※動画をクリックして選択箇所を画像に切り出します</span\r\n          >\r\n        </v-form>\r\n        <v-row align=\"center\" justify=\"center\" class=\"mt-12 mb-4 px-5\">\r\n          <v-btn outlined color=\"iconcolor\" rounded block @click=\"post\"\r\n            >サーバにPOSTする予定ボタン</v-btn\r\n          >\r\n        </v-row>\r\n      </v-sheet>\r\n    </v-col>\r\n  </v-row>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      work_video: null,\r\n      matching_image_side: '28',\r\n      matching_image: null,\r\n      uploadVideoUrl: ''\r\n    }\r\n  },\r\n  methods: {\r\n    onVideoPicked(file) {\r\n      if (file !== undefined && file !== null) {\r\n        if (file.name.lastIndexOf('.') <= 0) {\r\n          return\r\n        }\r\n        const fr = new FileReader()\r\n        fr.readAsDataURL(file)\r\n        fr.addEventListener('load', () => {\r\n          this.uploadVideoUrl = fr.result\r\n        })\r\n      } else {\r\n        this.uploadVideoUrl = ''\r\n      }\r\n    },\r\n    clip(event) {\r\n      const video = document.getElementById('upload-video')\r\n      const canvas = document.getElementById('c')\r\n\r\n      // 実際のビデオサイズ\r\n      const orgVideoWidth = video.videoWidth\r\n      const orgVideoHeight = video.videoHeight\r\n\r\n      // ブラウザ上の表示サイズ\r\n      const eleVideoWidth = video.width\r\n      const eleVideoHeight = video.height\r\n\r\n      // 割合を計算して処理していく\r\n      const widthRatio = orgVideoWidth / eleVideoWidth\r\n      const heightRatio = orgVideoHeight / eleVideoHeight\r\n\r\n      // カーソルの枠分ピクセルを調整\r\n      const pointX = event.offsetX + 3\r\n      const pointY = event.offsetY + 3\r\n\r\n      const srcX = pointX * widthRatio\r\n      const srcY = pointY * heightRatio\r\n\r\n      canvas\r\n        .getContext('2d')\r\n        .drawImage(\r\n          video,\r\n          srcX,\r\n          srcY,\r\n          this.matching_image_side,\r\n          this.matching_image_side,\r\n          0,\r\n          0,\r\n          this.matching_image_side,\r\n          this.matching_image_side\r\n        )\r\n    },\r\n    async post() {\r\n      const blobPromise = new Promise(function(resolve, reject) {\r\n        const canvas = document.getElementById('c')\r\n        canvas.toBlob(\r\n          function(blob) {\r\n            resolve(blob)\r\n          },\r\n          'image/jpeg',\r\n          1.0\r\n        )\r\n      })\r\n\r\n      const formData = new FormData()\r\n      formData.append('image', await blobPromise, 'test.jpg')\r\n\r\n      // API で切り抜いた画像をアップロードできる\r\n      // await this.$axios.post('/api/test', formData, {\r\n      //   headers: {\r\n      //     'Content-Type': 'multipart/form-data'\r\n      //   }\r\n      // })\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}