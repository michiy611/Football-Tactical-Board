{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass, TransitionGroup as _TransitionGroup, withCtx as _withCtx, createVNode as _createVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-5f6fa82f\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"input-area\"\n};\nconst _hoisted_2 = {\n  for: \"input-video\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  controls: \"\"\n};\nconst _hoisted_4 = [\"src\"];\nconst _hoisted_5 = {\n  class: \"thumbnail-list\"\n};\nconst _hoisted_6 = [\"src\", \"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"label\", _hoisted_2, _toDisplayString($data.isLoading ? '読み込み中...' : '動画を選択'), 1 /* TEXT */), _createElementVNode(\"input\", {\n    id: \"input-video\",\n    type: \"file\",\n    accept: \"video/mp4,video/x-m4v\",\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.handleFileSelect && $options.handleFileSelect(...args))\n  }, null, 32 /* HYDRATE_EVENTS */), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.onUploadMovie && $options.onUploadMovie(...args))\n  }, \"submit\"), $data.src ? (_openBlock(), _createElementBlock(\"video\", _hoisted_3, [_createElementVNode(\"source\", {\n    src: $data.src,\n    type: \"video/mp4; codecs=\\\"avc1.42E01E, mp4a.40.2\\\"\"\n  }, null, 8 /* PROPS */, _hoisted_4)])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.onUploadMovie && $options.onUploadMovie(...args))\n  }, \"このシーンをインポート\"), _createElementVNode(\"div\", _hoisted_5, [_createVNode(_TransitionGroup, {\n    name: \"fade\"\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.thumbnails, (thumbnail, index) => {\n      return _openBlock(), _createElementBlock(\"img\", {\n        class: _normalizeClass([\"thumbnail\", {\n          active: index === _ctx.selected\n        }]),\n        key: 'thumbnail' + index,\n        src: thumbnail,\n        onClick: $event => _ctx.selected = index\n      }, null, 10 /* CLASS, PROPS */, _hoisted_6);\n    }), 128 /* KEYED_FRAGMENT */))]),\n\n    _: 1 /* STABLE */\n  })])])]);\n}","map":{"version":3,"mappings":";;;EAESA,KAAK,EAAC;AAAY;;EACdC,GAAG,EAAC;AAAa;;;EAGjBC,QAAQ,EAAR;;;;EAIFF,KAAK,EAAC;AAAgB;;;uBAT/BG,oBAsBM,cArBJC,oBAoBM,OApBNC,UAoBM,GAnBJD,oBAAsE,SAAtEE,UAAsE,mBAA1CC,eAAS,yCACrCH,oBAA8F;IAAvFI,EAAE,EAAC,aAAa;IAACC,IAAI,EAAC,MAAM;IAACC,MAAM,EAAC,uBAAuB;IAAEC,QAAM,yCAAEC,+DAAgB;qCAC5FR,oBAA8C;IAArCS,OAAK,yCAAED,yDAAa;KAAE,QAAM,GACfL,SAAG,kBAAzBJ,oBAEQ,SAFRW,UAEQ,GADNV,oBAAqE;IAA5DW,GAAG,EAAER,SAAG;IAAEE,IAAI,EAAC;8EAE1BL,oBAAmD;IAA1CS,OAAK,yCAAED,yDAAa;KAAE,aAAW,GAC1CR,oBAWM,OAXNY,UAWM,GAVJC,aASmBC;IATDC,IAAI,EAAC;EAAM;sBAGzB,MAAwC,oBAF1ChB,oBAOCiB,6BAL8Bb,gBAAU,GAA/Bc,SAAS,EAAEC,KAAK;2BAF1BnB,oBAOC;QANCH,KAAK,mBAAC,WAAW;UAAAuB,QAICD,KAAK,KAAKE;QAAQ;QAFnCC,GAAG,gBAAgBH,KAAK;QACxBP,GAAG,EAAEM,SAAS;QAEdR,OAAK,YAAEW,aAAQ,GAAGF","names":["class","for","controls","_createElementBlock","_createElementVNode","_hoisted_1","_hoisted_2","$data","id","type","accept","onChange","$options","onClick","_hoisted_3","src","_hoisted_5","_createVNode","_TransitionGroup","name","_Fragment","thumbnail","index","active","_ctx","key"],"sourceRoot":"","sources":["C:\\Users\\20t333\\Documents\\実験2\\Football-Tactical-Board\\frontend\\src\\components\\UploadMovie.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"input-area\">\r\n      <label for=\"input-video\">{{ isLoading ? '読み込み中...' : '動画を選択'}}</label>\r\n      <input id=\"input-video\" type=\"file\" accept=\"video/mp4,video/x-m4v\" @change=\"handleFileSelect\">\r\n      <button @click='onUploadMovie'>submit</button>\r\n      <video controls v-if=\"src\">\r\n        <source :src=\"src\" type='video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"'>\r\n      </video>\r\n      <button @click='onUploadMovie'>このシーンをインポート</button>\r\n      <div class=\"thumbnail-list\">\r\n        <transition-group name=\"fade\">\r\n          <img \r\n            class=\"thumbnail\"\r\n            v-for=\"(thumbnail, index) in thumbnails\" \r\n            :key=\"'thumbnail' + index\" \r\n            :src=\"thumbnail\"\r\n            :class=\"{ active: index === selected }\"\r\n            @click=\"selected = index\"\r\n          >\r\n        </transition-group>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\n\r\nconst API_URL = 'http://127.0.0.1:5000'\r\nexport default {\r\n  data () {\r\n    return {\r\n      src: '',\r\n      thumbnails: [],\r\n      isLoading: false\r\n    }\r\n  },\r\n  methods: {\r\n    // ファイルのチェックと読み込み\r\n    handleFileSelect(event) {  \r\n      // ファイルのチェック\r\n      const file = event.target.files[0]\r\n      if (!file || !file.type.match('video/*')) return\r\n      // ファイルの読み込み\r\n      const reader = new FileReader()\r\n      reader.onload = (evt) => {\r\n        this.src = evt.target.result\r\n        this.createThumbnails(this.src)\r\n        this.isLoading = false\r\n      }\r\n      reader.readAsDataURL(file)\r\n      this.isLoading = true\r\n    },\r\n    createThumbnails(src) {\r\n      const video = document.createElement('video')\r\n      const canvas = document.createElement('canvas')\r\n      const context = canvas.getContext('2d')\r\n\r\n      //  読み込みが完了したらcanvas サイズを設定\r\n      video.onloadeddata = () => {\r\n        canvas.width = video.videoWidth\r\n        canvas.height = video.videoHeight\r\n        video.currentTime = 0\r\n      }\r\n\r\n      //  video.currentTime が変更されたらキャプチャ\r\n      video.onseeked = () => {\r\n        if(video.currentTime < video.duration ){\r\n          context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight)\r\n          this.thumbnails.push(canvas.toDataURL('image/jpeg'))\r\n          video.currentTime += Math.ceil(video.duration / 4) \r\n        } else {\r\n          context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight)\r\n          this.thumbnails.push(canvas.toDataURL('image/jpeg'))\r\n        }\r\n      }\r\n          \r\n      // 動画を読み込む\r\n      video.src = src\r\n      video.load()\r\n    },\r\n    // 動画をサーバーへアップロード\r\n    onUploadMovie () {\r\n      var params = new FormData()\r\n      params.append('video', this.src)\r\n      // Axiosを用いてFormData化したデータをFlaskへPostしています。\r\n      axios.post(`${API_URL}/classification`, params).then(function (response) {\r\n        console.log(response)\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.input-area {\r\n  background: #20262E;\r\n  border-radius: 4px;\r\n  padding: 20px;\r\n  transition: all 0.2s;\r\n}\r\n\r\ninput {\r\n  display: none;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  cursor: pointer;\r\n  width: 100%;\r\n  padding: 10px;\r\n  text-align: center;\r\n  color: #ccc;\r\n  border: 2px dashed #ccc;\r\n  background: #eee;\r\n  box-sizing: border-box;\r\n  transition: all 0.2s ease-out;\r\n}\r\n\r\nlabel:hover {\r\n  background: #fafafa;\r\n  padding: 20px 10px;\r\n}\r\n\r\nvideo {\r\n  display: block;\r\n  max-width: 50%;\r\n  margin: 10px auto;\r\n}\r\n\r\n.thumbnail {\r\n  width: 20%;\r\n  height: 20%;\r\n  box-sizing: border-box;\r\n  border: 4px solid transparent;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.thumbnail-list.active {\r\n  border: 4px solid #06c;\r\n}\r\n\r\n.thumbnail-list:not(.active):hover {\r\n  cursor: pointer;\r\n  opacity: 0.5;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}