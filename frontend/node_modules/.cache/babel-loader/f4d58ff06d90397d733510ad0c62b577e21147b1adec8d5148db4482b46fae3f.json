{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = {\n  ref: \"video\",\n  id: \"video\",\n  width: \"500\",\n  height: \"500\",\n  autoplay: \"\"\n};\nconst _hoisted_3 = {\n  ref: \"canvas\",\n  id: \"canvas\",\n  width: \"500\",\n  height: \"500\"\n};\nconst _hoisted_4 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", null, [_createElementVNode(\"video\", _hoisted_2, null, 512 /* NEED_PATCH */), _createElementVNode(\"div\", null, [_createElementVNode(\"button\", {\n    color: \"info\",\n    id: \"snap\",\n    onClick: _cache[0] || (_cache[0] = $event => $options.capture())\n  }, \"Snap Image\")]), _createElementVNode(\"canvas\", _hoisted_3, null, 512 /* NEED_PATCH */), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.captures, c => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      class: \"capture\",\n      key: c.d\n    }, [_createElementVNode(\"img\", {\n      src: c,\n      height: \"50\"\n    }, null, 8 /* PROPS */, _hoisted_4)]);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"mappings":";;EACOA,EAAE,EAAC;AAAK;;EAEFC,GAAG,EAAC,OAAO;EAACD,EAAE,EAAC,OAAO;EAACE,KAAK,EAAC,KAAK;EAACC,MAAM,EAAC,KAAK;EAACC,QAAQ,EAAR;;;EAI/CH,GAAG,EAAC,QAAQ;EAACD,EAAE,EAAC,QAAQ;EAACE,KAAK,EAAC,KAAK;EAACC,MAAM,EAAC;;;;uBANxDE,oBAaM,OAbNC,UAaM,GAZJC,oBAWM,cAVJA,oBAAwE,SAAxEC,UAAwE,+BACxED,oBAEM,cADJA,oBAAqE;IAA7DE,KAAK,EAAC,MAAM;IAACT,EAAE,EAAC,MAAM;IAAEU,OAAK,sCAAEC,gBAAO;KAAI,YAAU,KAE9DJ,oBAAmE,UAAnEK,UAAmE,+BACnEL,oBAIK,gCAHLF,oBAEKQ,6BAF2BC,aAAQ,EAAbC,CAAC;yBAA5BV,oBAEK;MAFDW,KAAK,EAAC,SAAS;MAA8BC,GAAG,EAAEF,CAAC,CAACG;QACtDX,oBAAkC;MAAtBY,GAAG,EAAEJ,CAAC;MAAEZ,MAAM,EAAC","names":["id","ref","width","height","autoplay","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","color","onClick","$options","_hoisted_3","_Fragment","_ctx","c","class","key","d","src"],"sourceRoot":"","sources":["C:\\Users\\20t333\\Documents\\実験2\\Football-Tactical-Board\\frontend\\src\\components\\SnapImage.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <div>\r\n      <video ref=\"video\" id=\"video\" width=\"500\" height=\"500\" autoplay></video>\r\n      <div>\r\n        <button color=\"info\" id=\"snap\" @click=\"capture()\">Snap Image</button>\r\n      </div>\r\n      <canvas ref=\"canvas\" id=\"canvas\" width=\"500\" height=\"500\"></canvas>\r\n      <ul>\r\n      <li class=\"capture\" v-for=\"c in captures\" v-bind:key=\"c.d\">\r\n        <img v-bind:src=\"c\" height=\"50\" />\r\n      </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n      data: {\r\n        video: {},\r\n        canvas: {},\r\n        captures: []\r\n      },\r\n      mounted () {\r\n        this.video = this.$refs.video\r\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n          navigator.mediaDevices.getUserMedia({ video: true }).then(stream => {\r\n            this.video.srcObject = stream\r\n            this.video.play()\r\n          })\r\n        }\r\n      },\r\n      methods: {\r\n        capture () {\r\n          this.canvas = this.$refs.canvas\r\n          this.canvas.getContext('2d').drawImage(this.video, 0, 0, 500, 500)\r\n          this.captures.push(this.canvas.toDataURL('image/png'))\r\n          console.log(this.captures)\r\n        }\r\n      }\r\n    }\r\n</script>\r\n\r\n<style>\r\n#canvas {\r\n  display: none;\r\n}\r\n.capture {\r\n  /* display: inline; */\r\n  padding: 5px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}