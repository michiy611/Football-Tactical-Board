{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"board\"\n}, [/*#__PURE__*/_createElementVNode(\"svg\")], -1);\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_3);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;AAAW;gCAEpBC,oBAkBM;EAlBDD,KAAK,EAAC;AAAO,iBAEdC,oBAaM;oBAfVC,UAkBM;;uBApBRC,oBAqBM,OArBNC,UAqBM","names":["class","_createElementVNode","_hoisted_2","_createElementBlock","_hoisted_1"],"sourceRoot":"","sources":["C:\\Users\\20t333\\Documents\\実験2\\Football-Tactical-Board\\frontend\\src\\components\\PlayerCircle.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- SVG定義 -->\r\n    <div class=\"board\">\r\n      <!-- <div class=\"board-area\"> -->\r\n        <svg>\r\n          <!-- <circle v-for=\"(r, idx) in rects\" :key=\"idx\"\r\n            @mousedown=\"move($event, idx)\"\r\n            :fill=\"r.color\" :stroke=\"r.stroke\"\r\n            :rx=\"r.rx\"\r\n            :cx=\"r.x\" :cy=\"r.y\" :r=\"radius\">{{message}}\r\n          </circle> -->\r\n          <!-- <circle v-for=\"(r, idx) in results\" :key=\"idx\"\r\n            @mousedown=\"move($event, idx)\"\r\n            :fill=\"r.color\" :stroke=\"r.stroke\"\r\n            :rx=\"r.rx\"\r\n            :cx=\"r.x\" :cy=\"r.y\" :r=\"radius\">{{message}}\r\n          </circle> -->\r\n        </svg>\r\n\r\n      <!-- </div> -->\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n  props: ['results'],\r\n  data () {\r\n    return {\r\n      ratio: 1,\r\n      dx: 0,\r\n      dy: 0,\r\n      viewport: '0 0 500 500',\r\n      isMove: false,\r\n      beforeMouseX: null,\r\n      beforeMouseY: null,\r\n      selectIdx: 0,\r\n      radius: window.innerWidth / 90,\r\n      rects: [\r\n        {\r\n          x: 30,\r\n          y: 40,\r\n          color: 'rgb(192, 192, 192)',\r\n          stroke: 'black',\r\n          team: 'home',\r\n        },\r\n        {\r\n          x: 30,\r\n          y: 50,\r\n          color: 'red',\r\n          stroke: 'black',\r\n          team: 'away',\r\n        },\r\n      ],\r\n    } \r\n  },\r\n  // マウス操作関連\r\n  mounted () {\r\n    console.log('MOUNT LISTENER ON')\r\n    document.addEventListener('mouseup', this.mouseUp)\r\n    document.addEventListener('mousemove', this.mouseMove)\r\n  },\r\n  beforeUnmount () {\r\n  // beforeDestroy () {\r\n    console.log('MOUNT LISTENER OFF')\r\n    document.removeEventListener('mouseup', this.mouseUp)\r\n    document.removeEventListener('mousemove', this.mouseMove)\r\n  },\r\n  methods: {\r\n\r\n    // 図形を動かすフラグを立てる\r\n    move (e, i) {\r\n      this.isMove = true\r\n      this.selectIdx = i\r\n      e.preventDefault()\r\n    },\r\n    // マウスのクリックが終わった段階で初期化\r\n    mouseUp (e) {\r\n      this.isMove = false\r\n      this.beforeMouseX = null\r\n      this.beforeMouseY = null\r\n      e.preventDefault()\r\n    },\r\n    // move中は前回まで動かした差分を取りながら座標を変化させていく\r\n    mouseMove (e) {\r\n      if (!this.isMove) return\r\n      var mouseX = e.offsetX * this.ratio + this.dx\r\n      var mouseY = e.offsetY * this.ratio + this.dy\r\n      var dx = 0\r\n      var dy = 0\r\n      if (this.beforeMouseX && this.beforeMouseY) {\r\n          dx = mouseX - this.beforeMouseX\r\n          dy = mouseY - this.beforeMouseY\r\n      }\r\n      this.beforeMouseX = mouseX\r\n      this.beforeMouseY = mouseY\r\n      var tempX = dx + Number(this.rects[this.selectIdx].x)\r\n      var tempY = dy + Number(this.rects[this.selectIdx].y)\r\n      //var tempX = dx + Number(this.polygons[this.selectIdx].x)\r\n      //var tempY = dy + Number(this.polygons[this.selectIdx].y)\r\n      if (tempX > 0) this.rects[this.selectIdx].x = tempX\r\n      if (tempY > 0) this.rects[this.selectIdx].y = tempY\r\n      e.preventDefault()\r\n    },\r\n    // drawImage(src) {\r\n    //     var canvas = document.getElementById(\"canvas\")\r\n    //     var context = canvas.getContext('2d')\r\n    //     var image = new Image()\r\n    //     image.src = src;\r\n    //     image.onload = function() {\r\n    //         canvas.width = image.width\r\n    //         canvas.height = image.height\r\n    //         context.drawImage(image, 0, 0)\r\n    //     }\r\n\r\n    //     context.beginPath();\r\n    //     context.arc(100, 100, 50, 0, 2 * Math.PI);\r\n    //     context.fillStyle = \"#00c2bc\";\r\n    //     context.fill();\r\n    // }\r\n  },\r\n\r\n}\r\n</script>\r\n\r\n<style>\r\n* {\r\n  text-align: center;\r\n}\r\n\r\n.board {\r\n  /* background-color: silver; */\r\n  height: 700px;\r\n}\r\n\r\n/* .board-area {\r\n  width : 60%;\r\n  height: 700px;\r\n} */\r\n\r\nsvg {\r\n  width : 60%;\r\n  height: 90%;\r\n  background-size: contain;\r\n  /* background: url('~@/assets/field.jpg'); */\r\n  background-image: url('~@/assets/field.jpg');\r\n  background-repeat:no-repeat;\r\n  /* padding-bottom: 40%; */\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}